// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name MFSDK
import Foundation
@_exported import MFSDK
import PassKit
import SafariServices
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct MFApplePayRequest {
  public init(merchantId: Swift.String, companyName: Swift.String, amount: Foundation.Decimal, currencyCode: Swift.String, customerIdentifier: Swift.String = "", supportedNetworks: Swift.Set<Swift.String>? = nil, supportedCountries: Swift.Set<Swift.String>? = nil, recurring: MFSDK.MFApplePayRecurring? = nil)
}
public struct MFApplePayRecurring {
  public init(label: Swift.String, description: Swift.String, recurringIntervalUnit: Foundation.NSCalendar.Unit, managementURL: Foundation.URL, intervalCount: Swift.Int? = nil, starDate: Foundation.Date? = nil, endDate: Foundation.Date? = nil)
}
public struct MFApplePayToken {
  public let token: Swift.String
}
@objc public enum MFPaymentProvider : Swift.Int, Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  case cardView
  case applePay
  case google
  case mfToken
  public var rawValue: MFSDK.MFPaymentProvider.RawValue {
    get
  }
  public init?(rawValue: MFSDK.MFPaymentProvider.RawValue)
}
@objc public enum MFKeyType : Swift.Int, Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  case invoiceId
  case paymentId
  public var rawValue: MFSDK.MFKeyType.RawValue {
    get
  }
  public init?(rawValue: MFSDK.MFKeyType.RawValue)
}
@objc public enum MFEnvironment : Swift.Int, Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  case test
  case live
  public var rawValue: MFSDK.MFEnvironment.RawValue {
    get
  }
  public init?(rawValue: MFSDK.MFEnvironment.RawValue)
}
extension MFSDK.MFPaymentRequest {
  @objc @available(swift, obsoleted: 1.0)
  dynamic public func executePayment(request: MFSDK.MFExecutePaymentRequest, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (MFSDK.MFPaymentStatusResponse?, MFSDK.MFFailResponse?, _ invoiceId: Swift.String?) -> Swift.Void)
  public func executePayment(request: MFSDK.MFExecutePaymentRequest, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (Swift.Result<MFSDK.MFPaymentStatusResponse, MFSDK.MFFailResponse>, _ invoiceId: Swift.String?) -> Swift.Void)
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  public func executePayment(request: MFSDK.MFExecutePaymentRequest, apiLanguage: MFSDK.MFAPILanguage) async -> (Swift.Result<MFSDK.MFPaymentStatusResponse, MFSDK.MFFailResponse>, Swift.String?)
  #endif
}
@_inheritsConvenienceInitializers @objcMembers @objc public class MFSendPaymentResponse : ObjectiveC.NSObject, Swift.Codable {
  public var invoiceId: Swift.Int?
  @objc public var invoiceURL: Swift.String?
  @objc public var customerReference: Swift.String?
  @objc public var userDefinedField: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objcMembers @objc public class MFInitiatePaymentResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var paymentMethods: [MFSDK.MFPaymentMethod]?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum MFNotificationOption : Swift.Int, Swift.RawRepresentable, Swift.CaseIterable {
  public typealias RawValue = Swift.String
  case all
  case email
  case sms
  case link
  public var rawValue: MFSDK.MFNotificationOption.RawValue {
    get
  }
  public init?(rawValue: MFSDK.MFNotificationOption.RawValue)
  public typealias AllCases = [MFSDK.MFNotificationOption]
  public static var allCases: [MFSDK.MFNotificationOption] {
    get
  }
}
@objcMembers @objc public class MFCardInfo : ObjectiveC.NSObject {
  @objc public var bypass: Swift.Bool
  @objc public init(cardNumber: Swift.String, cardExpiryMonth: Swift.String, cardExpiryYear: Swift.String, cardHolderName: Swift.String, cardSecurityCode: Swift.String, saveToken: Swift.Bool)
  @objc public init(cardNumber: Swift.String, cardExpiryMonth: Swift.String, cardExpiryYear: Swift.String, cardHolderName: Swift.String, cardSecurityCode: Swift.String)
  @objc public init(cardToken: Swift.String)
  @objc deinit
}
extension MFSDK.MFPaymentRequest {
  @objc @available(swift, obsoleted: 1.0)
  dynamic public func sendPayment(request: MFSDK.MFSendPaymentRequest, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (MFSDK.MFSendPaymentResponse?, MFSDK.MFFailResponse?) -> Swift.Void)
  public func sendPayment(request: MFSDK.MFSendPaymentRequest, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (Swift.Result<MFSDK.MFSendPaymentResponse, MFSDK.MFFailResponse>) -> ())
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  public func sendPayment(request: MFSDK.MFSendPaymentRequest, apiLanguage: MFSDK.MFAPILanguage) async -> Swift.Result<MFSDK.MFSendPaymentResponse, MFSDK.MFFailResponse>
  #endif
}
@objcMembers @objc public class MFCardPlaceholder : ObjectiveC.NSObject {
  @objc public static let `default`: MFSDK.MFCardPlaceholder
  @objc public init(cardHolderNamePlaceholder: Swift.String, cardNumberPlaceholder: Swift.String, expiryDatePlaceholder: Swift.String, cvvPlaceholder: Swift.String)
  @objc public var cardHolderNamePlaceholder: Swift.String
  @objc public var cardNumberPlaceholder: Swift.String
  @objc public var expiryDatePlaceholder: Swift.String
  @objc public var cvvPlaceholder: Swift.String
  @objc deinit
}
@objcMembers @objc public class MFCardLabel : ObjectiveC.NSObject {
  @objc public static let `default`: MFSDK.MFCardLabel
  @objc public init(cardHolderNameLabel: Swift.String, cardNumberLabel: Swift.String, expiryDateLabel: Swift.String, cvvLabel: Swift.String, showLabels: Swift.Bool, fontWeight: MFSDK.MFFontWeight = .normal)
  @objc public var cardHolderNameLabel: Swift.String
  @objc public var cardNumberLabel: Swift.String
  @objc public var expiryDateLabel: Swift.String
  @objc public var cvvLabel: Swift.String
  @objc public var showLabels: Swift.Bool
  @objc public var fontWeight: MFSDK.MFFontWeight
  @objc deinit
}
@objcMembers @objc public class MFCardTheme : ObjectiveC.NSObject {
  @objc public static let `default`: MFSDK.MFCardTheme
  @objc public init(inputColor: UIKit.UIColor, labelColor: UIKit.UIColor, errorColor: UIKit.UIColor, borderColor: UIKit.UIColor = #colorLiteral(red: 0.7803230882, green: 0.780436337, blue: 0.7802982926, alpha: 1))
  @objc public var inputColor: UIKit.UIColor
  @objc public var labelColor: UIKit.UIColor
  @objc public var errorColor: UIKit.UIColor
  @objc public var borderColor: UIKit.UIColor
  @objc public var language: MFSDK.MFLanguage
  @objc deinit
}
@objcMembers @objc public class MFCardInput : ObjectiveC.NSObject {
  @objc public static let `default`: MFSDK.MFCardInput
  public init(inputHeight: CoreFoundation.CGFloat, inputMargin: CoreFoundation.CGFloat, outerRadius: CoreFoundation.CGFloat? = nil)
  @objc public var inputHeight: CoreFoundation.CGFloat
  @objc public var inputMargin: CoreFoundation.CGFloat
  public var outerRadius: CoreFoundation.CGFloat?
  @objc deinit
}
@objcMembers @objc public class MFBoxShadow : ObjectiveC.NSObject {
  @objc public static let `default`: MFSDK.MFBoxShadow
  @objc public init(hOffset: CoreFoundation.CGFloat, vOffset: CoreFoundation.CGFloat, blur: CoreFoundation.CGFloat, spread: CoreFoundation.CGFloat, color: UIKit.UIColor)
  @objc public var hOffset: CoreFoundation.CGFloat
  @objc public var vOffset: CoreFoundation.CGFloat
  @objc public var blur: CoreFoundation.CGFloat
  @objc public var spread: CoreFoundation.CGFloat
  @objc public var color: UIKit.UIColor
  @objc deinit
}
@objcMembers @objc public class MFSavedCardText : ObjectiveC.NSObject {
  @objc public static let `default`: MFSDK.MFSavedCardText
  @objc public init(saveCardText: Swift.String, addCardText: Swift.String, deleteAlertText: MFSDK.MFDeleteAlert)
  @objc public var saveCardText: Swift.String
  @objc public var addCardText: Swift.String
  @objc public var deleteAlertText: MFSDK.MFDeleteAlert
  @objc deinit
}
@objcMembers @objc public class MFDeleteAlert : ObjectiveC.NSObject {
  @objc public static let `default`: MFSDK.MFDeleteAlert
  @objc public init(title: Swift.String, message: Swift.String, confirm: Swift.String, cancel: Swift.String)
  @objc public var title: Swift.String
  @objc public var message: Swift.String
  @objc public var confirm: Swift.String
  @objc public var cancel: Swift.String
  @objc deinit
}
@objcMembers @objc public class MFCardConfigureBuilder : ObjectiveC.NSObject {
  @objc public static let `default`: MFSDK.MFCardConfigureBuilder
  @objc public init(placeholder: MFSDK.MFCardPlaceholder, label: MFSDK.MFCardLabel, theme: MFSDK.MFCardTheme, input: MFSDK.MFCardInput = .default)
  @objc public func setPlaceholder(_ placeholder: MFSDK.MFCardPlaceholder)
  @objc public func setLabel(_ label: MFSDK.MFCardLabel)
  @objc public func setTheme(_ theme: MFSDK.MFCardTheme)
  @objc public func setCardInput(_ cardInput: MFSDK.MFCardInput)
  @objc public func setBorderWidth(_ borderWidth: CoreFoundation.CGFloat)
  @objc public func setBorderRadius(_ borderRadius: CoreFoundation.CGFloat)
  @objc public func setFontSize(_ fontSize: CoreFoundation.CGFloat)
  @objc public func setHideCardIcon(_ hideCardIcon: Swift.Bool)
  @objc public func setBoxShadow(_ boxShadow: MFSDK.MFBoxShadow)
  @objc public func setFontFamily(_ fontFamily: MFSDK.MFFontFamily)
  @objc public func setSaveCardText(_ saveCardText: MFSDK.MFSavedCardText)
  @objc public func setCardHeight(_ cardHeight: CoreFoundation.CGFloat)
  @objc public func setTokenHeight(_ tokenHeight: CoreFoundation.CGFloat)
  @objc public func setBackgroundColor(_ backgroundColor: UIKit.UIColor)
  @objc public func build() -> MFSDK.MFCardConfigureBuilder
  @objc deinit
}
@objc public enum MFCountry : Swift.Int, Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  case kuwait
  case saudiArabia
  case bahrain
  case unitedArabEmirates
  case qatar
  case oman
  case jordan
  case egypt
  public var rawValue: MFSDK.MFCountry.RawValue {
    get
  }
  public init?(rawValue: MFSDK.MFCountry.RawValue)
}
@objcMembers @objc public class MFInitiateSessionResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var sessionId: Swift.String?
  @objc public var countryCode: Swift.String?
  @objc public var customerTokens: [MFSDK.MFCustomerToken]?
  @objc public init(sessionId: Swift.String, countryCode: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class MFConstants : ObjectiveC.NSObject {
  @objc public static let paymentId: Swift.String
  @objc public static let applePayNotificationName: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public class MFPaymentStatusRequest : ObjectiveC.NSObject {
  @available(swift, obsoleted: 1.0)
  @objc public init(id: Swift.String, keyType: MFSDK.MFKeyType)
  public init(invoiceID: Swift.String)
  public init(paymentId: Swift.String)
  @objc deinit
}
extension MFSDK.MFPaymentRequest {
  @available(swift, obsoleted: 1.0)
  public func payByApplePay(paymentRequest: MFSDK.MFExecutePaymentRequest, applePayRequest: MFSDK.MFApplePayRequest, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (MFSDK.MFPaymentStatusResponse?, MFSDK.MFFailResponse?, _ invoiceId: Swift.String?) -> Swift.Void)
  public func payByApplePay(paymentRequest: MFSDK.MFExecutePaymentRequest, applePayRequest: MFSDK.MFApplePayRequest, _ apiLanguage: MFSDK.MFAPILanguage, completion: @escaping MFSDK.PaymentCompletionHandler)
  public func getApplePayToken(request: MFSDK.MFApplePayRequest, completion: @escaping (Swift.Result<MFSDK.MFApplePayToken, MFSDK.MFFailResponse>) -> Swift.Void)
}
extension MFSDK.MFPaymentRequest {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  public func payByApplePay(paymentRequest: MFSDK.MFExecutePaymentRequest, applePayRequest: MFSDK.MFApplePayRequest, _ apiLanguage: MFSDK.MFAPILanguage) async -> (Swift.Result<MFSDK.MFPaymentStatusResponse, MFSDK.MFFailResponse>, Swift.String?)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  public func getApplePayToken(request: MFSDK.MFApplePayRequest) async -> Swift.Result<MFSDK.MFApplePayToken, MFSDK.MFFailResponse>
  #endif
}
@objcMembers @objc public class MFCustomerAddress : ObjectiveC.NSObject {
  @objc public var block: Swift.String
  @objc public var street: Swift.String
  @objc public var houseBuildingNo: Swift.String
  @objc public var address: Swift.String
  @objc public var addressInstructions: Swift.String
  @objc public init(block: Swift.String, street: Swift.String, houseBuildingNo: Swift.String, address: Swift.String, addressInstructions: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc public class MFInitiatePaymentRequest : ObjectiveC.NSObject {
  @objc public init(invoiceAmount: Foundation.Decimal, currencyIso: MFSDK.MFCurrencyISO)
  @objc override dynamic public init()
  @objc deinit
}
public enum MFJSFunction {
  case submit(currency: Swift.String)
  case initPayment
  case update(amount: Swift.Double)
}
@objcMembers @objc public class MFSendPaymentRequest : ObjectiveC.NSObject {
  @objc public var mobileCountryIsoCode: Swift.String
  @objc public var displayCurrencyIso: MFSDK.MFCurrencyISO
  @objc public var customerCivilId: Swift.String
  @objc public var customerReference: Swift.String
  @objc public var customerEmail: Swift.String
  @objc public var customerMobile: Swift.String
  @objc public var invoiceItems: [MFSDK.MFProduct]
  @objc public var language: MFSDK.MFLanguage
  @objc public var expiryDate: Foundation.Date?
  @objc public var customerAddress: MFSDK.MFCustomerAddress?
  @objc public var userDefinedField: Swift.String
  @objc public var supplierCode: Swift.Int
  @objc public var supplierValue: Foundation.Decimal
  @objc public init(invoiceValue: Foundation.Decimal, notificationOption: MFSDK.MFNotificationOption, customerName: Swift.String)
  @objc deinit
}
@objc public enum MFFontWeight : Swift.Int, Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  case thin
  case extraLight
  case light
  case normal
  case medium
  case semiBold
  case bold
  case extraBold
  case heavy
  public var rawValue: MFSDK.MFFontWeight.RawValue {
    get
  }
  public init?(rawValue: MFSDK.MFFontWeight.RawValue)
}
@_inheritsConvenienceInitializers @objcMembers @objc public class MFPaymentRequest : ObjectiveC.NSObject {
  @objc public static let shared: MFSDK.MFPaymentRequest
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class MFProcessingDetails : ObjectiveC.NSObject {
  @objc public var autoCapture: Swift.Bool
  public var bypass3DS: Swift.Bool?
  public init(autoCapture: Swift.Bool = false, bypass3DS: Swift.Bool? = nil)
  @objc deinit
}
@objc public enum MFPaymentMethodCode : Swift.Int, Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  case amex
  case sadad
  case benefit
  case uaeDebitCards
  case qatarDebitCards
  case mada
  case kfast
  case knet
  case applePay
  case afs
  case visaMASTER
  case stcPay
  public var rawValue: MFSDK.MFPaymentMethodCode.RawValue {
    get
  }
  public init?(rawValue: MFSDK.MFPaymentMethodCode.RawValue)
}
@objcMembers @objc public class MFTheme : ObjectiveC.NSObject {
  @objc public var navigationTintColor: UIKit.UIColor
  @objc public var navigationBarTintColor: UIKit.UIColor
  @objc public var navigationTitle: Swift.String
  @objc public var cancelButtonTitle: Swift.String
  @objc public var showNavigationBar: Swift.Bool
  @objc public init(navigationTintColor: UIKit.UIColor, navigationBarTintColor: UIKit.UIColor, navigationTitle: Swift.String, cancelButtonTitle: Swift.String, showNavigationBar: Swift.Bool = true)
  @objc deinit
}
@objc public protocol MFCardViewDelegate {
  @objc func didHeightChanged(height: CoreFoundation.CGFloat)
}
@objcMembers @objc public class MFInvoiceTransaction : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let transactionDate: Swift.String?, paymentGateway: Swift.String?, referenceID: Swift.String?, trackID: Swift.String?
  @objc final public let transactionID: Swift.String?, paymentID: Swift.String?, authorizationID: Swift.String?, transactionStatus: Swift.String?
  @objc final public let transationValue: Swift.String?, customerServiceCharge: Swift.String?, dueValue: Swift.String?, paidCurrency: Swift.String?
  @objc final public let paidCurrencyValue: Swift.String?, currency: Swift.String?, error: Swift.String?
  @objc final public let cardNumber: Swift.String?, errorCode: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum MFPaymentype : Swift.Int, Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  case card
  case token
  public var rawValue: MFSDK.MFPaymentype.RawValue {
    get
  }
  public init?(rawValue: MFSDK.MFPaymentype.RawValue)
}
@_inheritsConvenienceInitializers @objcMembers @objc public class MFUpdateSessionResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objcMembers @objc public class MFFailResponse : ObjectiveC.NSObject, Swift.Error {
  @objc final public let statusCode: Swift.String
  @objc final public let errorDescription: Swift.String
  @objc deinit
}
@available(iOS 13.0, *)
public struct MFCardViewSwiftUI : SwiftUI.UIViewRepresentable {
  public init(session: MFSDK.MFInitiateSessionResponse?, request: MFSDK.MFExecutePaymentRequest?, shouldStartPayment: SwiftUI.Binding<Swift.Bool>, configuration: MFSDK.MFCardConfigureBuilder? = nil, handler: @escaping (Swift.Result<MFSDK.MFPaymentStatusResponse, MFSDK.MFFailResponse>, Swift.String?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: MFSDK.MFCardViewSwiftUI.Context) -> MFSDK.MFPaymentCardView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ uiView: MFSDK.MFPaymentCardView, context: MFSDK.MFCardViewSwiftUI.Context)
  @_Concurrency.MainActor(unsafe) public func makeCoordinator() -> MFSDK.MFCardViewSwiftUI.MFCardViewCoordinator
  @_hasMissingDesignatedInitializers public class MFCardViewCoordinator : MFSDK.MFCardViewDelegate {
    @objc public func didHeightChanged(height: CoreFoundation.CGFloat)
    public func executePayment(_ request: MFSDK.MFExecutePaymentRequest, _ completion: @escaping (Swift.Result<MFSDK.MFPaymentStatusResponse, MFSDK.MFFailResponse>, Swift.String?) -> Swift.Void)
    @objc deinit
  }
  public func cardBin(_ cardBin: SwiftUI.Binding<Swift.String?>) -> MFSDK.MFCardViewSwiftUI
  public func height(_ height: SwiftUI.Binding<CoreFoundation.CGFloat?>) -> MFSDK.MFCardViewSwiftUI
  public func cardBrand(_ cardBrand: SwiftUI.Binding<Swift.String?>) -> MFSDK.MFCardViewSwiftUI
  public typealias Body = Swift.Never
  public typealias Coordinator = MFSDK.MFCardViewSwiftUI.MFCardViewCoordinator
  public typealias UIViewType = MFSDK.MFPaymentCardView
}
@objc public enum MFAPILanguage : Swift.Int, Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  case arabic
  case english
  public var rawValue: MFSDK.MFAPILanguage.RawValue {
    get
  }
  public init?(rawValue: MFSDK.MFAPILanguage.RawValue)
}
@objc public enum MFFontFamily : Swift.Int, Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  case sansSerif
  case arial
  case timesNewRoman
  case helvetica
  case tahoma
  case verdana
  case monaco
  case georgia
  case courierNew
  case garamond
  case trebuchetMS
  public var rawValue: MFSDK.MFFontFamily.RawValue {
    get
  }
  public init?(rawValue: MFSDK.MFFontFamily.RawValue)
}
@objc @objcMembers public class MFSupplier : ObjectiveC.NSObject, Swift.Codable {
  @objc public var supplierCode: Swift.Int
  public var proposedShare: Foundation.Decimal?
  @objc public var invoiceShare: Foundation.Decimal
  @objc public var supplierName: Swift.String
  @objc public var depositShare: Foundation.Decimal
  @objc public init(supplierCode: Swift.Int, invoiceShare: Foundation.Decimal)
  @objc public init(supplierCode: Swift.Int, proposedShare: Foundation.Decimal, invoiceShare: Foundation.Decimal)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension MFSDK.MFPaymentRequest {
  @objc @available(*, deprecated, message: "Use instead `RecurringModel` in `MFExecutePaymentRequest` using `executePayment() executeDirectPayment()`")
  @available(swift, obsoleted: 1.0)
  dynamic public func executeRecurringPayment(request: MFSDK.MFExecutePaymentRequest, cardInfo: MFSDK.MFCardInfo, recurringIntervalDays: Swift.Int, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (MFSDK.MFDirectPaymentResponse?, MFSDK.MFFailResponse?, _ invoiceId: Swift.String?) -> Swift.Void)
  @available(*, deprecated, message: "Use instead `RecurringModel` in `MFExecutePaymentRequest` using `executePayment() executeDirectPayment()`")
  public func executeRecurringPayment(request: MFSDK.MFExecutePaymentRequest, cardInfo: MFSDK.MFCardInfo, recurringIntervalDays: Swift.Int, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (Swift.Result<MFSDK.MFDirectPaymentResponse, MFSDK.MFFailResponse>, _ invoiceId: Swift.String?) -> Swift.Void)
  @objc @available(*, deprecated, message: "Use instead `RecurringModel` in `MFExecutePaymentRequest` using `executePayment() executeDirectPayment()`")
  @available(swift, obsoleted: 1.0)
  dynamic public func executeRecurringPayment(request: MFSDK.MFExecutePaymentRequest, cardInfo: MFSDK.MFCardInfo, recurringType: MFSDK.MFRecurringTypeEnum, recurringIntervalDays: Swift.Int, iteration: Swift.Int, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (MFSDK.MFDirectPaymentResponse?, MFSDK.MFFailResponse?, _ invoiceId: Swift.String?) -> Swift.Void)
  @available(*, deprecated, message: "Use instead `RecurringModel` in `MFExecutePaymentRequest` using `executePayment() executeDirectPayment()`")
  public func executeRecurringPayment(request: MFSDK.MFExecutePaymentRequest, cardInfo: MFSDK.MFCardInfo, recurringType: MFSDK.MFRecurringType, iteration: Swift.Int = 0, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (Swift.Result<MFSDK.MFDirectPaymentResponse, MFSDK.MFFailResponse>, _ invoiceId: Swift.String?) -> Swift.Void)
}
extension MFSDK.MFPaymentRequest {
  @objc @available(swift, obsoleted: 1.0)
  dynamic public func cancelRecurringPayment(recurringId: Swift.String, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (Swift.Bool, MFSDK.MFFailResponse?) -> Swift.Void)
  public func cancelRecurringPayment(recurringId: Swift.String, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (Swift.Result<Swift.Bool, MFSDK.MFFailResponse>) -> Swift.Void)
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  public func cancelRecurringPayment(recurringId: Swift.String, apiLanguage: MFSDK.MFAPILanguage) async -> Swift.Result<Swift.Bool, MFSDK.MFFailResponse>
  #endif
}
@_hasMissingDesignatedInitializers @objcMembers @objc public class MFCallbackResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let sessionId: Swift.String
  @objc final public let cardBrand: Swift.String?
  @objc public var first8Digits: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objcMembers @objc public class MFExecutePaymentRequest : ObjectiveC.NSObject {
  @objc public var invoiceValue: Foundation.Decimal
  @objc public var customerName: Swift.String
  @objc public var customerCivilId: Swift.String
  @objc public var customerReference: Swift.String
  @objc public var customerEmail: Swift.String
  @objc public var customerMobile: Swift.String
  @objc public var invoiceItems: [MFSDK.MFProduct]
  @objc public var language: MFSDK.MFLanguage
  @objc public var expiryDate: Foundation.Date?
  @objc public var customerAddress: MFSDK.MFCustomerAddress?
  @objc public var userDefinedField: Swift.String
  @objc public var displayCurrencyIso: MFSDK.MFCurrencyISO
  @objc public var mobileCountryCode: Swift.String
  @objc @available(*, deprecated, renamed: "suppliers", message: "Please use 'suppliers' array property instead")
  public var supplierCode: Swift.Int
  @objc @available(*, deprecated, renamed: "suppliers", message: "Please use 'suppliers' array property instead")
  public var supplierValue: Foundation.Decimal
  @objc public var suppliers: [MFSDK.MFSupplier]
  @objc public var sessionId: Swift.String
  @objc public var recurringModel: MFSDK.MFRecurringModel?
  @objc public var processingDetails: MFSDK.MFProcessingDetails?
  @objc @available(*, deprecated, message: "callBackURL and errorURL are no longer in use")
  public init(invoiceValue: Foundation.Decimal, paymentMethod: Swift.Int, callBackUrl: Swift.String, errorUrl: Swift.String)
  @objc public init(invoiceValue: Foundation.Decimal, paymentMethod: Swift.Int)
  @objc public init(invoiceValue: Foundation.Decimal)
  @objc public init(invoiceValue: Foundation.Decimal, displayCurrencyIso: MFSDK.MFCurrencyISO)
  @objc public func updatePaymentMethod(_ paymentMethod: Swift.Int)
  @objc deinit
}
extension MFSDK.MFPaymentRequest {
  public func executeTokenPayment(updateSessionRequest: MFSDK.MFUpdateSessionRequest, paymentRequest: MFSDK.MFExecutePaymentRequest, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (Swift.Result<MFSDK.MFPaymentStatusResponse, MFSDK.MFFailResponse>, _ invoiceId: Swift.String?) -> Swift.Void)
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  public func executeTokenPayment(updateSessionRequest: MFSDK.MFUpdateSessionRequest, paymentRequest: MFSDK.MFExecutePaymentRequest, apiLanguage: MFSDK.MFAPILanguage) async -> (Swift.Result<MFSDK.MFPaymentStatusResponse, MFSDK.MFFailResponse>, Swift.String?)
  #endif
}
@objcMembers @objc public class MFInvoiceItem : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let itemName: Swift.String
  @objc final public let quantity: Swift.Int
  @objc final public let unitPrice: Foundation.Decimal
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objcMembers @objc public class MFPaymentMethod : ObjectiveC.NSObject, Swift.Codable {
  @objc public var paymentMethodId: Swift.Int
  @objc public var paymentMethodAr: Swift.String?
  @objc public var paymentMethodEn: Swift.String?
  @objc public var isDirectPayment: Swift.Bool
  @objc public var serviceCharge: Foundation.Decimal
  @objc public var totalAmount: Foundation.Decimal
  @objc public var currencyIso: Swift.String?
  @objc public var imageUrl: Swift.String?
  @objc public var paymentMethodCode: Swift.String
  @objc public var isEmbeddedSupported: Swift.Bool
  @objc public var paymentCurrencyIso: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class MFApplePay : ObjectiveC.NSObject {
  public var didLoad: (() -> Swift.Void)?
  public var merchantName: Swift.String?
  @objc override dynamic public init()
  public func setupApplePay(_ initiateSession: MFSDK.MFInitiateSessionResponse, _ request: MFSDK.MFExecutePaymentRequest, _ apiLanguage: MFSDK.MFAPILanguage, completion: ((Swift.Result<Swift.Bool, MFSDK.MFFailResponse>) -> Swift.Void)? = nil)
  public func openPaymentSheet(completion: @escaping (Swift.Result<MFSDK.MFCallbackResponse, MFSDK.MFFailResponse>) -> Swift.Void)
  public func executePayment(request: MFSDK.MFExecutePaymentRequest? = nil, completion: @escaping (Swift.Result<MFSDK.MFPaymentStatusResponse, MFSDK.MFFailResponse>, _ invoiceId: Swift.String?) -> Swift.Void)
  public func update(amount: Swift.Double)
  @objc deinit
}
extension MFSDK.MFApplePay : WebKit.WKScriptMessageHandler {
  @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
extension MFSDK.MFApplePay : WebKit.WKUIDelegate, WebKit.WKNavigationDelegate {
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
}
extension MFSDK.MFApplePay {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  @discardableResult
  public func setupApplePay(_ initiateSession: MFSDK.MFInitiateSessionResponse, _ request: MFSDK.MFExecutePaymentRequest) async -> (Swift.Result<Swift.Bool, MFSDK.MFFailResponse>)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  public func openPaymentSheet() async -> (Swift.Result<MFSDK.MFCallbackResponse, MFSDK.MFFailResponse>)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  public func executePayment(request: MFSDK.MFExecutePaymentRequest? = nil) async -> (Swift.Result<MFSDK.MFPaymentStatusResponse, MFSDK.MFFailResponse>, Swift.String?)
  #endif
}
@objc @_inheritsConvenienceInitializers @available(swift, obsoleted: 1.0)
@objcMembers public class MFEnumRawValue : ObjectiveC.NSObject {
  @objc public class func rawValue(mobileISO: MFSDK.MFMobileCountryCodeISO) -> Swift.String
  @objc public class func rawValue(paymentMethodCode: MFSDK.MFPaymentMethodCode) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc public class MFInApplePayConfigureBuilder : ObjectiveC.NSObject {
  @objc public static let `default`: MFSDK.MFInApplePayConfigureBuilder
  @objc public func setHeight(_ height: CoreFoundation.CGFloat)
  @objc public func setBorderRadius(_ borderRadius: CoreFoundation.CGFloat)
  @objc public func setButtonText(_ _buttonText: Swift.String)
  @objc public func hideLoadingIndicator(_ isHidden: Swift.Bool)
  @objc public func setVendorame(_ name: Swift.String)
  @objc public func build() -> MFSDK.MFInApplePayConfigureBuilder
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class MFRecurringModel : ObjectiveC.NSObject {
  public var recurringType: MFSDK.MFRecurringType
  public var intervalDays: Swift.Int?
  @objc public var iteration: Swift.Int
  @objc @available(swift, obsoleted: 1.0)
  public init(recurringTypeEnum: MFSDK.MFRecurringTypeEnum, intervalDays: Swift.Int, iteration: Swift.Int)
  public init(recurringType: MFSDK.MFRecurringType, iteration: Swift.Int = 0)
  @objc deinit
}
@objcMembers @objc public class MFUpdateSessionRequest : ObjectiveC.NSObject {
  @objc public init(sessionId: Swift.String, tokenType: MFSDK.MFPaymentProvider, token: Swift.String, securityCode: Swift.String? = nil)
  @objc deinit
}
@objcMembers @objc public class MFDirectPaymentResponse : ObjectiveC.NSObject {
  @objc final public let getPaymentStatusResponse: MFSDK.MFPaymentStatusResponse?
  @objc final public let cardInfoResponse: MFSDK.MFCardInfoResponse?
  @objc public init(getPaymentStatusResponse: MFSDK.MFPaymentStatusResponse, cardInfoResponse: MFSDK.MFCardInfoResponse)
  @objc deinit
}
@objcMembers @objc public class MFCardInfoResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let recurringId: Swift.String?
  @objc final public let token: Swift.String?
  @objc final public let cardInfo: MFSDK.Card?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objcMembers @objc public class Card : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let number: Swift.String?, expiryMonth: Swift.String?, expiryYear: Swift.String?, brand: Swift.String?
  @objc final public let issuer: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum MFLanguage : Swift.Int, Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  case arabic
  case english
  public var rawValue: MFSDK.MFLanguage.RawValue {
    get
  }
  public init?(rawValue: MFSDK.MFLanguage.RawValue)
}
@objc public protocol MFPaymentDelegate {
  @objc func didInvoiceCreated(invoiceId: Swift.String)
}
@_inheritsConvenienceInitializers @objcMembers @objc public class MFCustomerToken : ObjectiveC.NSObject, Swift.Codable {
  @objc public var token: Swift.String?
  @objc public var cardNumber: Swift.String?
  @objc public var cardBrand: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension MFSDK.MFPaymentRequest {
  @objc @available(swift, obsoleted: 1.0)
  dynamic public func initiatePayment(request: MFSDK.MFInitiatePaymentRequest, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (MFSDK.MFInitiatePaymentResponse?, MFSDK.MFFailResponse?) -> Swift.Void)
  public func initiatePayment(request: MFSDK.MFInitiatePaymentRequest, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (Swift.Result<MFSDK.MFInitiatePaymentResponse, MFSDK.MFFailResponse>) -> Swift.Void)
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  public func initiatePayment(request: MFSDK.MFInitiatePaymentRequest, apiLanguage: MFSDK.MFAPILanguage) async -> Swift.Result<MFSDK.MFInitiatePaymentResponse, MFSDK.MFFailResponse>
  #endif
}
@_inheritsConvenienceInitializers @objcMembers @objc public class MFPaymentHandler : ObjectiveC.NSObject {
  public static func open(paymentUrl: Swift.String, redirectionUrl: Swift.String, apiLanguage: MFSDK.MFLanguage, completion: @escaping (Swift.Result<Swift.String, MFSDK.MFFailResponse>) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
extension MFSDK.MFPaymentRequest {
  @objc @available(iOS 9.0, *)
  @available(swift, obsoleted: 1.0)
  @available(iOS, obsoleted: 13.0, message: "Please use 'executeApplePayPaymentWithRequest:apiLanguage:completion:' instead")
  dynamic public func executeApplePayPayment(request: MFSDK.MFExecutePaymentRequest, urlScheme: Swift.String, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (MFSDK.MFPaymentStatusResponse?, MFSDK.MFFailResponse?, _ invoiceId: Swift.String?) -> Swift.Void)
  @available(iOS 9.0, *)
  @available(iOS, obsoleted: 13.0, message: "Please use 'executeApplePayPayment(request:apiLanguage:completion:)' instead")
  public func executeApplePayPayment(request: MFSDK.MFExecutePaymentRequest, urlScheme: Swift.String, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (Swift.Result<MFSDK.MFPaymentStatusResponse, MFSDK.MFFailResponse>, _ invoiceId: Swift.String?) -> Swift.Void)
}
extension MFSDK.MFPaymentRequest {
  @objc @available(swift, obsoleted: 1.0)
  dynamic public func initiateSession(request: MFSDK.MFInitiateSessionRequest? = nil, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (MFSDK.MFInitiateSessionResponse?, MFSDK.MFFailResponse?) -> Swift.Void)
  @objc @available(swift, obsoleted: 1.0)
  dynamic public func initiateSession(apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (MFSDK.MFInitiateSessionResponse?, MFSDK.MFFailResponse?) -> Swift.Void)
  public func initiateSession(request: MFSDK.MFInitiateSessionRequest? = nil, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (Swift.Result<MFSDK.MFInitiateSessionResponse, MFSDK.MFFailResponse>) -> Swift.Void)
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  public func initiateSession(request: MFSDK.MFInitiateSessionRequest? = nil, apiLanguage: MFSDK.MFAPILanguage) async -> Swift.Result<MFSDK.MFInitiateSessionResponse, MFSDK.MFFailResponse>
  #endif
}
@objcMembers @objc public class MFInitiateSessionRequest : ObjectiveC.NSObject {
  public init(customerIdentifier: Swift.String, saveToken: Swift.Bool? = nil, isRecurring: Swift.Bool? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @IBDesignable @_Concurrency.MainActor(unsafe) public class MFPaymentCardView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: (any MFSDK.MFCardViewDelegate)?
  @objc @_Concurrency.MainActor(unsafe) public var configure: MFSDK.MFCardConfigureBuilder {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) public func load(initiateSession: MFSDK.MFInitiateSessionResponse, binDidChangeCompletion: ((Swift.String) -> Swift.Void)? = nil)
  @objc @available(swift, obsoleted: 1.0)
  @_Concurrency.MainActor(unsafe) public func pay(_ request: MFSDK.MFExecutePaymentRequest, _ apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (MFSDK.MFPaymentStatusResponse?, MFSDK.MFFailResponse?, _ invoiceId: Swift.String?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func pay(_ request: MFSDK.MFExecutePaymentRequest, _ apiLanguage: MFSDK.MFAPILanguage, _ currency: MFSDK.MFCurrencyISO? = nil, completion: @escaping (Swift.Result<MFSDK.MFPaymentStatusResponse, MFSDK.MFFailResponse>, _ invoiceId: Swift.String?) -> Swift.Void)
  @available(*, deprecated, message: "This function is deprecated and will be removed in later versions. Use thee function submit instead.")
  @_Concurrency.MainActor(unsafe) public func validate(validateSessionCompletion: @escaping (Swift.Result<Swift.String, MFSDK.MFFailResponse>) -> Swift.Void)
  @objc @available(swift, obsoleted: 1.0)
  @_Concurrency.MainActor(unsafe) public func submit(completion: @escaping (MFSDK.MFCallbackResponse?, MFSDK.MFFailResponse?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func submit(_ currency: MFSDK.MFCurrencyISO? = nil, completion: @escaping (Swift.Result<MFSDK.MFCallbackResponse, MFSDK.MFFailResponse>) -> Swift.Void)
}
extension MFSDK.MFPaymentCardView : WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
extension MFSDK.MFPaymentCardView {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  @_Concurrency.MainActor(unsafe) public func pay(_ request: MFSDK.MFExecutePaymentRequest, _ apiLanguage: MFSDK.MFAPILanguage) async -> (Swift.Result<MFSDK.MFPaymentStatusResponse, MFSDK.MFFailResponse>, Swift.String?)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  @_Concurrency.MainActor(unsafe) public func validate() async -> (Swift.Result<Swift.String, MFSDK.MFFailResponse>)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  @_Concurrency.MainActor(unsafe) public func submit() async -> (Swift.Result<MFSDK.MFCallbackResponse, MFSDK.MFFailResponse>)
  #endif
}
extension MFSDK.MFPaymentRequest {
  @objc @available(iOS 13, *)
  @available(swift, obsoleted: 1.0)
  dynamic public func executeApplePayPayment(request: MFSDK.MFExecutePaymentRequest, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (MFSDK.MFPaymentStatusResponse?, MFSDK.MFFailResponse?, _ invoiceId: Swift.String?) -> Swift.Void)
  @available(iOS 13.0, *)
  public func executeApplePayPayment(request: MFSDK.MFExecutePaymentRequest, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (Swift.Result<MFSDK.MFPaymentStatusResponse, MFSDK.MFFailResponse>, _ invoiceId: Swift.String?) -> Swift.Void)
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  public func executeApplePayPayment(request: MFSDK.MFExecutePaymentRequest, apiLanguage: MFSDK.MFAPILanguage) async -> (Swift.Result<MFSDK.MFPaymentStatusResponse, MFSDK.MFFailResponse>, Swift.String?)
  #endif
}
public typealias PaymentCompletionHandler = ((Swift.Result<MFSDK.MFPaymentStatusResponse, MFSDK.MFFailResponse>, _ invoiceId: Swift.String?) -> Swift.Void)
@objc public enum MFCurrencyISO : Swift.Int, Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  case kuwait_KWD
  case saudiArabia_SAR
  case bahrain_BHD
  case uAE_AED
  case qatar_QAR
  case oman_MOR
  case jordan_JOD
  case unitedStates_USD
  case euro_EUR
  case Cuban_Convertible_Peso_CUC
  case Falkland_Islands_Pound_FKP
  case Indonesian_Rupiah_IDR
  case Brazilian_Real_BRL
  case Costa_Rican_Colón_CRC
  case Maldivian_Rufiyaa_MVR
  case Brunei_Dollar_BND
  case Romanian_Leu_RON
  case Yemeni_Rial_YER
  case Lesotho_Loti_LSL
  case Mongolian_Tugrik_MNT
  case Papua_New_Guinean_Kina_PGK
  case Liberian_Dollar_LRD
  case Venezuelan_Bolívar_Soberano_VES
  case Cape_Verdean_Escudo_CVE
  case Palladium_Ounce_XPD
  case Haitian_Gourde_HTG
  case Saint_Helena_Pound_SHP
  case Kenyan_Shilling_KES
  case Moldovan_Leu_MDL
  case Kyrgystani_Som_KGS
  case New_Zealand_Dollar_NZD
  case Jersey_Pound_JEP
  case Macanese_Pataca_MOP
  case Moroccan_Dirham_MAD
  case Ethiopian_Birr_ETB
  case Turkish_Lira_TRY
  case Zambian_Kwacha_ZMW
  case East_Caribbean_Dollar_XCD
  case Libyan_Dinar_LYD
  case Sudanese_Pound_SDG
  case Tanzanian_Shilling_TZS
  case Vanuatu_Vatu_VUV
  case Platinum_Ounce_XPT
  case Fijian_Dollar_FJD
  case SaoTomAndPrincipeDobraSTD
  case Polish_Zloty_PLN
  case Canadian_Dollar_CAD
  case Guernsey_Pound_GGP
  case Chilean_Unit_of_Account_UF_CLF
  case Eritrean_Nakfa_ERN
  case Somali_Shilling_SOS
  case Botswanan_Pula_BWP
  case Belize_Dollar_BZD
  case Salvadoran_Colón_SVC
  case São_Tomé_and_Príncipe_Dobra_STN
  case Azerbaijani_Manat_AZN
  case Barbadian_Dollar_BBD
  case Mauritian_Rupee_MUR
  case Special_Drawing_Rights_XDR
  case Laotian_Kip_LAK
  case Swazi_Lilangeni_SZL
  case Czech_Republic_Koruna_CZK
  case Mexican_Peso_MXN
  case CFP_Franc_XPF
  case Jamaican_Dollar_JMD
  case Burundian_Franc_BIF
  case Gibraltar_Pound_GIP
  case Namibian_Dollar_NAD
  case Syrian_Pound_SYP
  case Surinamese_Dollar_SRD
  case CFA_Franc_BEAC_XAF
  case North_Korean_Won_KPW
  case Norwegian_Krone_NOK
  case Singapore_Dollar_SGD
  case Bhutanese_Ngultrum_BTN
  case Chinese_Yuan_CNY
  case Malaysian_Ringgit_MYR
  case Afghan_Afghani_AFN
  case BosniaHerzegovinaConvertibleMarkBAM
  case Danish_Krone_DKK
  case South_Korean_Won_KRW
  case Chilean_Peso_CLP
  case Guatemalan_Quetzal_GTQ
  case Serbian_Dinar_RSD
  case Turkmenistani_Manat_TMT
  case Armenian_Dram_AMD
  case MauritanianOuguiyaMRO
  case Solomon_Islands_Dollar_SBD
  case Belarusian_Ruble_BYN
  case Bangladeshi_Taka_BDT
  case Malawian_Kwacha_MWK
  case Pakistani_Rupee_PKR
  case South_African_Rand_ZAR
  case Zimbabwean_Dollar_ZWL
  case Bolivian_Boliviano_BOB
  case Gold_Ounce_XAU
  case Trinidad_and_Tobago_Dollar_TTD
  case Peruvian_Nuevo_Sol_PEN
  case Australian_Dollar_AUD
  case Sri_Lankan_Rupee_LKR
  case Sierra_Leonean_Leone_SLL
  case Israeli_New_Sheqel_ILS
  case Bitcoin_BTC
  case Lebanese_Pound_LBP
  case Rwandan_Franc_RWF
  case Croatian_Kuna_HRK
  case Honduran_Lempira_HNL
  case Bermudan_Dollar_BMD
  case Venezuelan_Bolívar_Fuerte_Old_VEF
  case Congolese_Franc_CDF
  case Guinean_Franc_GNF
  case Indian_Rupee_INR
  case British_Pound_Sterling_GBP
  case Samoan_Tala_WST
  case Netherlands_Antillean_Guilder_ANG
  case Manx_pound_IMP
  case Nicaraguan_Córdoba_NIO
  case Algerian_Dinar_DZD
  case South_Sudanese_Pound_SSP
  case Swiss_Franc_CHF
  case Bulgarian_Lev_BGN
  case Egyptian_Pound_EGP
  case Cayman_Islands_Dollar_KYD
  case Mauritanian_Ouguiya_MRU
  case Japanese_Yen_JPY
  case Philippine_Peso_PHP
  case Paraguayan_Guarani_PYG
  case Swedish_Krona_SEK
  case Cuban_Peso_CUP
  case Hong_Kong_Dollar_HKD
  case Iraqi_Dinar_IQD
  case Dominican_Peso_DOP
  case Kazakhstani_Tenge_KZT
  case Hungarian_Forint_HUF
  case Nigerian_Naira_NGN
  case New_Taiwan_Dollar_TWD
  case Nepalese_Rupee_NPR
  case Ugandan_Shilling_UGX
  case Silver_Ounce_XAG
  case Angolan_Kwanza_AOA
  case Comorian_Franc_KMF
  case Myanma_Kyat_MMK
  case CFA_Franc_BCEAO_XOF
  case Georgian_Lari_GEL
  case Gambian_Dalasi_GMD
  case Seychellois_Rupee_SCR
  case Tunisian_Dinar_TND
  case Cambodian_Riel_KHR
  case Chinese_Yuan_Offshore_CNH
  case Argentine_Peso_ARS
  case Tajikistani_Somoni_TJS
  case Russian_Ruble_RUB
  case Ghanaian_Cedi_GHS
  case Guyanaese_Dollar_GYD
  case Djiboutian_Franc_DJF
  case Mozambican_Metical_MZN
  case Ukrainian_Hryvnia_UAH
  case Bahamian_Dollar_BSD
  case Aruban_Florin_AWG
  case Vietnamese_Dong_VND
  case Icelandic_Króna_ISK
  case Uzbekistan_Som_UZS
  case Thai_Baht_THB
  case Uruguayan_Peso_UYU
  case Macedonian_Denar_MKD
  case Malagasy_Ariary_MGA
  case Colombian_Peso_COP
  case Panamanian_Balboa_PAB
  case Iranian_Rial_IRR
  case TonganPangaTOP
  case Albanian_Lek_ALL
  case none
  public var rawValue: MFSDK.MFCurrencyISO.RawValue {
    get
  }
  public init?(rawValue: MFSDK.MFCurrencyISO.RawValue)
}
public enum MFJSEvent : Swift.String {
  case executePayment
  case binDidChange
  case cardSizeChanged
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class MFApplePayButton : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var configure: MFSDK.MFInApplePayConfigureBuilder {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc @available(swift, obsoleted: 1.0)
  @_Concurrency.MainActor(unsafe) public func load(_ initiateSession: MFSDK.MFInitiateSessionResponse, _ request: MFSDK.MFExecutePaymentRequest, _ apiLanguage: MFSDK.MFAPILanguage, startLoading: (() -> Swift.Void)? = nil, completion: @escaping (MFSDK.MFPaymentStatusResponse?, MFSDK.MFFailResponse?, _ invoiceId: Swift.String?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func load(_ initiateSession: MFSDK.MFInitiateSessionResponse, _ request: MFSDK.MFExecutePaymentRequest, _ apiLanguage: MFSDK.MFAPILanguage, startLoading: (() -> Swift.Void)? = nil, completion: @escaping (Swift.Result<MFSDK.MFPaymentStatusResponse, MFSDK.MFFailResponse>, _ invoiceId: Swift.String?) -> Swift.Void)
  @objc @available(swift, obsoleted: 1.0)
  @_Concurrency.MainActor(unsafe) public func display(_ initiateSession: MFSDK.MFInitiateSessionResponse, _ request: MFSDK.MFExecutePaymentRequest, _ apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (MFSDK.MFCallbackResponse?, MFSDK.MFFailResponse?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func display(_ initiateSession: MFSDK.MFInitiateSessionResponse, _ request: MFSDK.MFExecutePaymentRequest, _ apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (Swift.Result<MFSDK.MFCallbackResponse, MFSDK.MFFailResponse>) -> Swift.Void)
  @objc @available(swift, obsoleted: 1.0)
  @_Concurrency.MainActor(unsafe) public func executePayment(request: MFSDK.MFExecutePaymentRequest? = nil, completion: @escaping (MFSDK.MFPaymentStatusResponse?, MFSDK.MFFailResponse?, _ invoiceId: Swift.String?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func executePayment(request: MFSDK.MFExecutePaymentRequest? = nil, completion: @escaping (Swift.Result<MFSDK.MFPaymentStatusResponse, MFSDK.MFFailResponse>, _ invoiceId: Swift.String?) -> Swift.Void)
  @objc @_Concurrency.MainActor(unsafe) public func update(amount: Swift.Double)
  @objc deinit
}
extension MFSDK.MFApplePayButton : WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
extension MFSDK.MFApplePayButton : WebKit.WKUIDelegate, WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
}
extension MFSDK.MFApplePayButton {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  @_Concurrency.MainActor(unsafe) public func load(_ initiateSession: MFSDK.MFInitiateSessionResponse, _ request: MFSDK.MFExecutePaymentRequest, _ apiLanguage: MFSDK.MFAPILanguage, startLoading: (() -> Swift.Void)? = nil) async -> (Swift.Result<MFSDK.MFPaymentStatusResponse, MFSDK.MFFailResponse>, Swift.String?)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  @_Concurrency.MainActor(unsafe) public func display(_ initiateSession: MFSDK.MFInitiateSessionResponse, _ request: MFSDK.MFExecutePaymentRequest, _ apiLanguage: MFSDK.MFAPILanguage) async -> (Swift.Result<MFSDK.MFCallbackResponse, MFSDK.MFFailResponse>)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  @_Concurrency.MainActor(unsafe) public func executePayment(request: MFSDK.MFExecutePaymentRequest? = nil) async -> (Swift.Result<MFSDK.MFPaymentStatusResponse, MFSDK.MFFailResponse>, Swift.String?)
  #endif
}
@objc @objcMembers public class MFProduct : ObjectiveC.NSObject {
  @objc public var name: Swift.String
  @objc public var unitPrice: Swift.Double
  @objc public var quantity: Swift.Int
  @objc public init(name: Swift.String, unitPrice: Swift.Double, quantity: Swift.Int)
  @objc deinit
}
extension Foundation.NSNotification.Name {
  public static let applePayCheck: Foundation.Notification.Name
}
extension Foundation.URL {
  public subscript(queryParam: Swift.String) -> Swift.String? {
    get
  }
}
@objc extension Foundation.NSURL {
  @objc dynamic public subscript(queryParam: Swift.String) -> Swift.String? {
    @objc get
  }
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
}
@objcMembers @objc public class MFPaymentStatusResponse : ObjectiveC.NSObject, Swift.Codable {
  final public let invoiceID: Swift.Int?
  @objc final public let invoiceStatus: Swift.String?, invoiceReference: Swift.String?, customerReference: Swift.String?, createdDate: Swift.String?
  @objc final public let expiryDate: Swift.String?
  final public let invoiceValue: Foundation.Decimal?
  @objc final public let comments: Swift.String?, customerName: Swift.String?, customerMobile: Swift.String?, customerEmail: Swift.String?
  @objc final public let userDefinedField: Swift.String?, invoiceDisplayValue: Swift.String?
  @objc final public let invoiceItems: [MFSDK.MFInvoiceItem]?
  @objc final public let invoiceTransactions: [MFSDK.MFInvoiceTransaction]?
  @objc final public let suppliers: [MFSDK.MFSupplier]?
  @objc public var recurringId: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum MFMobileCountryCodeISO : Swift.Int, Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  case kuwait
  case saudiArabia
  case bahrain
  case uAE
  case qatar
  case oman
  case jordan
  case egypt
  public var rawValue: MFSDK.MFMobileCountryCodeISO.RawValue {
    get
  }
  public init?(rawValue: MFSDK.MFMobileCountryCodeISO.RawValue)
}
extension MFSDK.MFPaymentRequest {
  @objc @available(swift, obsoleted: 1.0)
  dynamic public func executeDirectPayment(request: MFSDK.MFExecutePaymentRequest, cardInfo: MFSDK.MFCardInfo, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (MFSDK.MFDirectPaymentResponse?, MFSDK.MFFailResponse?, _ invoiceId: Swift.String?) -> Swift.Void)
  public func executeDirectPayment(request: MFSDK.MFExecutePaymentRequest, cardInfo: MFSDK.MFCardInfo, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (Swift.Result<MFSDK.MFDirectPaymentResponse, MFSDK.MFFailResponse>, _ invoiceId: Swift.String?) -> Swift.Void)
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  public func executeDirectPayment(request: MFSDK.MFExecutePaymentRequest, cardInfo: MFSDK.MFCardInfo, apiLanguage: MFSDK.MFAPILanguage) async -> (Swift.Result<MFSDK.MFDirectPaymentResponse, MFSDK.MFFailResponse>, Swift.String?)
  #endif
}
extension MFSDK.MFPaymentRequest {
  @objc @available(swift, obsoleted: 1.0)
  dynamic public func cancelToken(token: Swift.String, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (Swift.Bool, MFSDK.MFFailResponse?) -> Swift.Void)
  public func cancelToken(token: Swift.String, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (Swift.Result<Swift.Bool, MFSDK.MFFailResponse>) -> Swift.Void)
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  public func cancelToken(token: Swift.String, apiLanguage: MFSDK.MFAPILanguage) async -> Swift.Result<Swift.Bool, MFSDK.MFFailResponse>
  #endif
}
extension MFSDK.MFPaymentRequest {
  @objc @available(swift, obsoleted: 1.0)
  dynamic public func getPaymentStatus(paymentStatus: MFSDK.MFPaymentStatusRequest, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (MFSDK.MFPaymentStatusResponse?, MFSDK.MFFailResponse?) -> ())
  public func getPaymentStatus(paymentStatus: MFSDK.MFPaymentStatusRequest, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (Swift.Result<MFSDK.MFPaymentStatusResponse, MFSDK.MFFailResponse>) -> ())
  public func getPaymentStatus(paymentStatus: MFSDK.MFPaymentStatusRequest, apiLanguage: MFSDK.MFAPILanguage, completion: @escaping (Swift.Result<MFSDK.MFPaymentStatusResponse, MFSDK.MFFailResponse>, _ apiResponse: MFSDK.MFPaymentStatusResponse?) -> Swift.Void)
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  public func getPaymentStatus(paymentStatus: MFSDK.MFPaymentStatusRequest, apiLanguage: MFSDK.MFAPILanguage) async -> Swift.Result<MFSDK.MFPaymentStatusResponse, MFSDK.MFFailResponse>
  #endif
}
@objc public enum MFRecurringTypeEnum : Swift.Int, Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  case daily
  case weekly
  case monthly
  case custom
  public var rawValue: MFSDK.MFRecurringTypeEnum.RawValue {
    get
  }
  public init?(rawValue: MFSDK.MFRecurringTypeEnum.RawValue)
}
public enum MFRecurringType {
  case daily
  case weekly
  case monthly
  case custom(intervalDays: Swift.Int)
}
@_inheritsConvenienceInitializers @objcMembers @objc public class MFSettings : ObjectiveC.NSObject {
  @objc public static let shared: MFSDK.MFSettings
  @objc weak public var delegate: (any MFSDK.MFPaymentDelegate)?
  @objc public func configure(token: Swift.String, country: MFSDK.MFCountry, environment: MFSDK.MFEnvironment)
  @objc public func configure(country: MFSDK.MFCountry, environment: MFSDK.MFEnvironment)
  @objc public func setTheme(theme: MFSDK.MFTheme)
  @objc override dynamic public init()
  @objc deinit
}
extension MFSDK.MFPaymentProvider : Swift.Equatable {}
extension MFSDK.MFPaymentProvider : Swift.Hashable {}
extension MFSDK.MFKeyType : Swift.Equatable {}
extension MFSDK.MFKeyType : Swift.Hashable {}
extension MFSDK.MFEnvironment : Swift.Equatable {}
extension MFSDK.MFEnvironment : Swift.Hashable {}
extension MFSDK.MFNotificationOption : Swift.Equatable {}
extension MFSDK.MFNotificationOption : Swift.Hashable {}
extension MFSDK.MFCountry : Swift.Equatable {}
extension MFSDK.MFCountry : Swift.Hashable {}
extension MFSDK.MFFontWeight : Swift.Equatable {}
extension MFSDK.MFFontWeight : Swift.Hashable {}
extension MFSDK.MFPaymentMethodCode : Swift.Equatable {}
extension MFSDK.MFPaymentMethodCode : Swift.Hashable {}
extension MFSDK.MFPaymentype : Swift.Equatable {}
extension MFSDK.MFPaymentype : Swift.Hashable {}
extension MFSDK.MFAPILanguage : Swift.Equatable {}
extension MFSDK.MFAPILanguage : Swift.Hashable {}
extension MFSDK.MFFontFamily : Swift.Equatable {}
extension MFSDK.MFFontFamily : Swift.Hashable {}
extension MFSDK.MFLanguage : Swift.Equatable {}
extension MFSDK.MFLanguage : Swift.Hashable {}
extension MFSDK.MFCurrencyISO : Swift.Equatable {}
extension MFSDK.MFCurrencyISO : Swift.Hashable {}
extension MFSDK.MFJSEvent : Swift.Equatable {}
extension MFSDK.MFJSEvent : Swift.Hashable {}
extension MFSDK.MFJSEvent : Swift.RawRepresentable {}
extension MFSDK.MFMobileCountryCodeISO : Swift.Equatable {}
extension MFSDK.MFMobileCountryCodeISO : Swift.Hashable {}
extension MFSDK.MFRecurringTypeEnum : Swift.Equatable {}
extension MFSDK.MFRecurringTypeEnum : Swift.Hashable {}
