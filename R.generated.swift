//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 4 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `Button`.
    static let button = Rswift.ColorResource(bundle: R.hostingBundle, name: "Button")
    /// Color `Top Light`.
    static let topLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "Top Light")
    /// Color `Top`.
    static let top = Rswift.ColorResource(bundle: R.hostingBundle, name: "Top")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Button", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.button, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Top Light", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func topLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.topLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Top", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.top, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Button", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func button(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.button.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Top Light", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func topLight(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.topLight.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Top", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func top(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.top.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 262 images.
  struct image {
    /// Image `01_Splash screen`.
    static let _SplashScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "01_Splash screen")
    /// Image `02_Onboarding screen-01 (1)`.
    static let _OnboardingScreen011 = Rswift.ImageResource(bundle: R.hostingBundle, name: "02_Onboarding screen-01 (1)")
    /// Image `02_Onboarding screen-01`.
    static let _OnboardingScreen01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "02_Onboarding screen-01")
    /// Image `ChangePassword`.
    static let changePassword = Rswift.ImageResource(bundle: R.hostingBundle, name: "ChangePassword")
    /// Image `Chat28`.
    static let chat28 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Chat28")
    /// Image `Chat30`.
    static let chat30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Chat30")
    /// Image `Connection`.
    static let connection = Rswift.ImageResource(bundle: R.hostingBundle, name: "Connection")
    /// Image `Ellipse 216`.
    static let ellipse216 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 216")
    /// Image `Ellipse 217`.
    static let ellipse217 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 217")
    /// Image `Ellipse 59-1`.
    static let ellipse591 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 59-1")
    /// Image `Ellipse 59`.
    static let ellipse59 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 59")
    /// Image `Ellipse 84`.
    static let ellipse84 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 84")
    /// Image `Ellipse 85`.
    static let ellipse85 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 85")
    /// Image `Ellipse 86`.
    static let ellipse86 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 86")
    /// Image `Ellipse 87`.
    static let ellipse87 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 87")
    /// Image `Ellipse 88`.
    static let ellipse88 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 88")
    /// Image `Favorite_sml-1`.
    static let favorite_sml1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Favorite_sml-1")
    /// Image `Favorite_sml`.
    static let favorite_sml = Rswift.ImageResource(bundle: R.hostingBundle, name: "Favorite_sml")
    /// Image `Frame-1`.
    static let frame1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Frame-1")
    /// Image `Frame-2`.
    static let frame2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Frame-2")
    /// Image `Frame`.
    static let frame = Rswift.ImageResource(bundle: R.hostingBundle, name: "Frame")
    /// Image `Group (1)`.
    static let group1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group (1)")
    /// Image `Group 100899`.
    static let group100899 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 100899")
    /// Image `Group 100902 (1)`.
    static let group1009021 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 100902 (1)")
    /// Image `Group 100902`.
    static let group100902 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 100902")
    /// Image `Group 100911`.
    static let group100911 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 100911")
    /// Image `Group 100940`.
    static let group100940 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 100940")
    /// Image `Group 100944 1`.
    static let group1009441 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 100944 1")
    /// Image `Group 717`.
    static let group717 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 717")
    /// Image `HomeTab`.
    static let homeTab = Rswift.ImageResource(bundle: R.hostingBundle, name: "HomeTab")
    /// Image `IMG_6432__1_-removebg-preview 2`.
    static let img_6432__1_RemovebgPreview2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "IMG_6432__1_-removebg-preview 2")
    /// Image `IMG_6432__1_-removebg-preview_1-removebg-preview 1`.
    static let img_6432__1_RemovebgPreview_1RemovebgPreview1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "IMG_6432__1_-removebg-preview_1-removebg-preview 1")
    /// Image `Icons`.
    static let icons = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icons")
    /// Image `Mark Video`.
    static let markVideo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Mark Video")
    /// Image `MarkVideo60`.
    static let markVideo60 = Rswift.ImageResource(bundle: R.hostingBundle, name: "MarkVideo60")
    /// Image `NotifyTab`.
    static let notifyTab = Rswift.ImageResource(bundle: R.hostingBundle, name: "NotifyTab")
    /// Image `Pic-11`.
    static let pic11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pic-11")
    /// Image `Pic-12`.
    static let pic12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pic-12")
    /// Image `Pic-13`.
    static let pic13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pic-13")
    /// Image `Pic-14`.
    static let pic14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pic-14")
    /// Image `Pic-15`.
    static let pic15 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pic-15")
    /// Image `Pic-16`.
    static let pic16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pic-16")
    /// Image `Pic-17`.
    static let pic17 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pic-17")
    /// Image `Pic-1`.
    static let pic1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pic-1")
    /// Image `Pic-2`.
    static let pic2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pic-2")
    /// Image `Pic-3`.
    static let pic3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pic-3")
    /// Image `Pic-5`.
    static let pic5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pic-5")
    /// Image `Pic-6`.
    static let pic6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pic-6")
    /// Image `Pic-7`.
    static let pic7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pic-7")
    /// Image `Pic-8`.
    static let pic8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pic-8")
    /// Image `Pic-9`.
    static let pic9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pic-9")
    /// Image `Pic`.
    static let pic = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pic")
    /// Image `Radio`.
    static let radio = Rswift.ImageResource(bundle: R.hostingBundle, name: "Radio")
    /// Image `RectangleCheckedYellow`.
    static let rectangleCheckedYellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "RectangleCheckedYellow")
    /// Image `RectangleChecked`.
    static let rectangleChecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "RectangleChecked")
    /// Image `RectangleUncheckYellow`.
    static let rectangleUncheckYellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "RectangleUncheckYellow")
    /// Image `RectangleUncheck`.
    static let rectangleUncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "RectangleUncheck")
    /// Image `Review`.
    static let review = Rswift.ImageResource(bundle: R.hostingBundle, name: "Review")
    /// Image `RightArrow18`.
    static let rightArrow18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "RightArrow18")
    /// Image `RightIcon24`.
    static let rightIcon24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "RightIcon24")
    /// Image `SettingTab`.
    static let settingTab = Rswift.ImageResource(bundle: R.hostingBundle, name: "SettingTab")
    /// Image `Star123`.
    static let star123 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star123")
    /// Image `StarGreen`.
    static let starGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "StarGreen")
    /// Image `Time`.
    static let time = Rswift.ImageResource(bundle: R.hostingBundle, name: "Time")
    /// Image `Types of Cancer`.
    static let typesOfCancer = Rswift.ImageResource(bundle: R.hostingBundle, name: "Types of Cancer")
    /// Image `Vector-10`.
    static let vector10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Vector-10")
    /// Image `Vector-11`.
    static let vector11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Vector-11")
    /// Image `Vector-12`.
    static let vector12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Vector-12")
    /// Image `Vector-13`.
    static let vector13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Vector-13")
    /// Image `Vector-14`.
    static let vector14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Vector-14")
    /// Image `Vector-15`.
    static let vector15 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Vector-15")
    /// Image `Vector-16`.
    static let vector16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Vector-16")
    /// Image `Vector-17`.
    static let vector17 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Vector-17")
    /// Image `Vector-1`.
    static let vector1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Vector-1")
    /// Image `Vector-4`.
    static let vector4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Vector-4")
    /// Image `Vector-5`.
    static let vector5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Vector-5")
    /// Image `Vector-6`.
    static let vector6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Vector-6")
    /// Image `Vector-7`.
    static let vector7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Vector-7")
    /// Image `Vector-8`.
    static let vector8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Vector-8")
    /// Image `Vector-9`.
    static let vector9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Vector-9")
    /// Image `VectorInfo`.
    static let vectorInfo = Rswift.ImageResource(bundle: R.hostingBundle, name: "VectorInfo")
    /// Image `VideoTab`.
    static let videoTab = Rswift.ImageResource(bundle: R.hostingBundle, name: "VideoTab")
    /// Image `aboutimg`.
    static let aboutimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "aboutimg")
    /// Image `addimage`.
    static let addimage = Rswift.ImageResource(bundle: R.hostingBundle, name: "addimage")
    /// Image `addratingmoney_ic`.
    static let addratingmoney_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "addratingmoney_ic")
    /// Image `addres`.
    static let addres = Rswift.ImageResource(bundle: R.hostingBundle, name: "addres")
    /// Image `ae`.
    static let ae = Rswift.ImageResource(bundle: R.hostingBundle, name: "ae")
    /// Image `app_icon`.
    static let app_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "app_icon")
    /// Image `arrow_green_up`.
    static let arrow_green_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_green_up")
    /// Image `arrow_red_down`.
    static let arrow_red_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_red_down")
    /// Image `b`.
    static let b = Rswift.ImageResource(bundle: R.hostingBundle, name: "b")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `banner1`.
    static let banner1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "banner1")
    /// Image `banner2`.
    static let banner2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "banner2")
    /// Image `black_back`.
    static let black_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "black_back")
    /// Image `boxicon`.
    static let boxicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "boxicon")
    /// Image `call`.
    static let call = Rswift.ImageResource(bundle: R.hostingBundle, name: "call")
    /// Image `callicon`.
    static let callicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "callicon")
    /// Image `cancelRed`.
    static let cancelRed = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancelRed")
    /// Image `cancel`.
    static let cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel")
    /// Image `cart`.
    static let cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "cart")
    /// Image `cat1`.
    static let cat1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat1")
    /// Image `cat2`.
    static let cat2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat2")
    /// Image `cat3`.
    static let cat3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat3")
    /// Image `cat4`.
    static let cat4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat4")
    /// Image `cat5`.
    static let cat5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat5")
    /// Image `cat6`.
    static let cat6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat6")
    /// Image `cat7`.
    static let cat7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat7")
    /// Image `cat8`.
    static let cat8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat8")
    /// Image `cat9`.
    static let cat9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat9")
    /// Image `chat`.
    static let chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat")
    /// Image `chaticon`.
    static let chaticon = Rswift.ImageResource(bundle: R.hostingBundle, name: "chaticon")
    /// Image `checked`.
    static let checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "checked")
    /// Image `circle_back`.
    static let circle_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "circle_back")
    /// Image `clocation`.
    static let clocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "clocation")
    /// Image `congratulationicon`.
    static let congratulationicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "congratulationicon")
    /// Image `contacticon`.
    static let contacticon = Rswift.ImageResource(bundle: R.hostingBundle, name: "contacticon")
    /// Image `contractorimg`.
    static let contractorimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "contractorimg")
    /// Image `cotwoavoid_ic`.
    static let cotwoavoid_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "cotwoavoid_ic")
    /// Image `crossicon`.
    static let crossicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "crossicon")
    /// Image `delete`.
    static let delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete")
    /// Image `devicon_google`.
    static let devicon_google = Rswift.ImageResource(bundle: R.hostingBundle, name: "devicon_google")
    /// Image `discount_food_big_img`.
    static let discount_food_big_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "discount_food_big_img")
    /// Image `discountimg2`.
    static let discountimg2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "discountimg2")
    /// Image `doctor`.
    static let doctor = Rswift.ImageResource(bundle: R.hostingBundle, name: "doctor")
    /// Image `downarow`.
    static let downarow = Rswift.ImageResource(bundle: R.hostingBundle, name: "downarow")
    /// Image `drawer_icon`.
    static let drawer_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "drawer_icon")
    /// Image `edit`.
    static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit")
    /// Image `editnewicon16`.
    static let editnewicon16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "editnewicon16")
    /// Image `editproicon`.
    static let editproicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "editproicon")
    /// Image `empty_cart`.
    static let empty_cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_cart")
    /// Image `empty_notification`.
    static let empty_notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_notification")
    /// Image `empty_transaction`.
    static let empty_transaction = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_transaction")
    /// Image `ep_setting`.
    static let ep_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "ep_setting")
    /// Image `faq`.
    static let faq = Rswift.ImageResource(bundle: R.hostingBundle, name: "faq")
    /// Image `fav_selected`.
    static let fav_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "fav_selected")
    /// Image `fav`.
    static let fav = Rswift.ImageResource(bundle: R.hostingBundle, name: "fav")
    /// Image `favorite`.
    static let favorite = Rswift.ImageResource(bundle: R.hostingBundle, name: "favorite")
    /// Image `filter`.
    static let filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter")
    /// Image `food_details`.
    static let food_details = Rswift.ImageResource(bundle: R.hostingBundle, name: "food_details")
    /// Image `foodimg`.
    static let foodimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "foodimg")
    /// Image `forward_ic`.
    static let forward_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "forward_ic")
    /// Image `googleplus`.
    static let googleplus = Rswift.ImageResource(bundle: R.hostingBundle, name: "googleplus")
    /// Image `grey_call`.
    static let grey_call = Rswift.ImageResource(bundle: R.hostingBundle, name: "grey_call")
    /// Image `grey_icon (2)`.
    static let grey_icon2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "grey_icon (2)")
    /// Image `grey_round_edge_back`.
    static let grey_round_edge_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "grey_round_edge_back")
    /// Image `greyblackback`.
    static let greyblackback = Rswift.ImageResource(bundle: R.hostingBundle, name: "greyblackback")
    /// Image `greyclock`.
    static let greyclock = Rswift.ImageResource(bundle: R.hostingBundle, name: "greyclock")
    /// Image `gridicon`.
    static let gridicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "gridicon")
    /// Image `gridicons_location`.
    static let gridicons_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "gridicons_location")
    /// Image `help`.
    static let help = Rswift.ImageResource(bundle: R.hostingBundle, name: "help")
    /// Image `home-2-1`.
    static let home21 = Rswift.ImageResource(bundle: R.hostingBundle, name: "home-2-1")
    /// Image `home-2`.
    static let home2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "home-2")
    /// Image `homeicon`.
    static let homeicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "homeicon")
    /// Image `ic_CheckedCircle_Black`.
    static let ic_CheckedCircle_Black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_CheckedCircle_Black")
    /// Image `ic_Circle_Black`.
    static let ic_Circle_Black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_Circle_Black")
    /// Image `ic_back`.
    static let ic_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back")
    /// Image `ic_forward`.
    static let ic_forward = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_forward")
    /// Image `ic_outline-home`.
    static let ic_outlineHome = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_outline-home")
    /// Image `iconamoon_profile-bold`.
    static let iconamoon_profileBold = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconamoon_profile-bold")
    /// Image `imageuploadicon`.
    static let imageuploadicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "imageuploadicon")
    /// Image `img`.
    static let img = Rswift.ImageResource(bundle: R.hostingBundle, name: "img")
    /// Image `input2`.
    static let input2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "input2")
    /// Image `invitefriend_big_ic1`.
    static let invitefriend_big_ic1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "invitefriend_big_ic1")
    /// Image `invitefriend_big_ic`.
    static let invitefriend_big_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "invitefriend_big_ic")
    /// Image `invitefriend`.
    static let invitefriend = Rswift.ImageResource(bundle: R.hostingBundle, name: "invitefriend")
    /// Image `knet`.
    static let knet = Rswift.ImageResource(bundle: R.hostingBundle, name: "knet")
    /// Image `line`.
    static let line = Rswift.ImageResource(bundle: R.hostingBundle, name: "line")
    /// Image `location_grey`.
    static let location_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "location_grey")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `logobackgrey`.
    static let logobackgrey = Rswift.ImageResource(bundle: R.hostingBundle, name: "logobackgrey")
    /// Image `macdonladicon`.
    static let macdonladicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "macdonladicon")
    /// Image `mage_filter`.
    static let mage_filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "mage_filter")
    /// Image `magic_bag2`.
    static let magic_bag2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "magic_bag2")
    /// Image `magic_bag_big_image`.
    static let magic_bag_big_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "magic_bag_big_image")
    /// Image `map`.
    static let map = Rswift.ImageResource(bundle: R.hostingBundle, name: "map")
    /// Image `mapicon`.
    static let mapicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "mapicon")
    /// Image `mapiconnew`.
    static let mapiconnew = Rswift.ImageResource(bundle: R.hostingBundle, name: "mapiconnew")
    /// Image `mapimg`.
    static let mapimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "mapimg")
    /// Image `md`.
    static let md = Rswift.ImageResource(bundle: R.hostingBundle, name: "md")
    /// Image `mdi_invite`.
    static let mdi_invite = Rswift.ImageResource(bundle: R.hostingBundle, name: "mdi_invite")
    /// Image `mf`.
    static let mf = Rswift.ImageResource(bundle: R.hostingBundle, name: "mf")
    /// Image `minus`.
    static let minus = Rswift.ImageResource(bundle: R.hostingBundle, name: "minus")
    /// Image `money_saved`.
    static let money_saved = Rswift.ImageResource(bundle: R.hostingBundle, name: "money_saved")
    /// Image `moneysaved_ic`.
    static let moneysaved_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "moneysaved_ic")
    /// Image `more`.
    static let more = Rswift.ImageResource(bundle: R.hostingBundle, name: "more")
    /// Image `mpgs`.
    static let mpgs = Rswift.ImageResource(bundle: R.hostingBundle, name: "mpgs")
    /// Image `mycart`.
    static let mycart = Rswift.ImageResource(bundle: R.hostingBundle, name: "mycart")
    /// Image `myserviceicon`.
    static let myserviceicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "myserviceicon")
    /// Image `next`.
    static let next = Rswift.ImageResource(bundle: R.hostingBundle, name: "next")
    /// Image `noitem`.
    static let noitem = Rswift.ImageResource(bundle: R.hostingBundle, name: "noitem")
    /// Image `nonotiicon`.
    static let nonotiicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "nonotiicon")
    /// Image `notification-1`.
    static let notification1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification-1")
    /// Image `notification_bell`.
    static let notification_bell = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification_bell")
    /// Image `notification`.
    static let notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification")
    /// Image `notiimage`.
    static let notiimage = Rswift.ImageResource(bundle: R.hostingBundle, name: "notiimage")
    /// Image `np`.
    static let np = Rswift.ImageResource(bundle: R.hostingBundle, name: "np")
    /// Image `officeicon`.
    static let officeicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "officeicon")
    /// Image `order_active`.
    static let order_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "order_active")
    /// Image `order_deactive`.
    static let order_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "order_deactive")
    /// Image `ordershead`.
    static let ordershead = Rswift.ImageResource(bundle: R.hostingBundle, name: "ordershead")
    /// Image `password`.
    static let password = Rswift.ImageResource(bundle: R.hostingBundle, name: "password")
    /// Image `ph_wallet`.
    static let ph_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "ph_wallet")
    /// Image `pin`.
    static let pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin")
    /// Image `pinone`.
    static let pinone = Rswift.ImageResource(bundle: R.hostingBundle, name: "pinone")
    /// Image `pinthree`.
    static let pinthree = Rswift.ImageResource(bundle: R.hostingBundle, name: "pinthree")
    /// Image `pintwo`.
    static let pintwo = Rswift.ImageResource(bundle: R.hostingBundle, name: "pintwo")
    /// Image `placeholder_Blank`.
    static let placeholder_Blank = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_Blank")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    /// Image `plumberimg`.
    static let plumberimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "plumberimg")
    /// Image `plus1`.
    static let plus1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus1")
    /// Image `plus_grey`.
    static let plus_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus_grey")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `privacy`.
    static let privacy = Rswift.ImageResource(bundle: R.hostingBundle, name: "privacy")
    /// Image `profile_ic`.
    static let profile_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_ic")
    /// Image `profile`.
    static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile")
    /// Image `prop`.
    static let prop = Rswift.ImageResource(bundle: R.hostingBundle, name: "prop")
    /// Image `providericon`.
    static let providericon = Rswift.ImageResource(bundle: R.hostingBundle, name: "providericon")
    /// Image `providerimg`.
    static let providerimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "providerimg")
    /// Image `questionicon`.
    static let questionicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "questionicon")
    /// Image `rest_image2`.
    static let rest_image2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rest_image2")
    /// Image `rest_image`.
    static let rest_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "rest_image")
    /// Image `righticon`.
    static let righticon = Rswift.ImageResource(bundle: R.hostingBundle, name: "righticon")
    /// Image `sadad`.
    static let sadad = Rswift.ImageResource(bundle: R.hostingBundle, name: "sadad")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `searchfilm`.
    static let searchfilm = Rswift.ImageResource(bundle: R.hostingBundle, name: "searchfilm")
    /// Image `searchfiltericon`.
    static let searchfiltericon = Rswift.ImageResource(bundle: R.hostingBundle, name: "searchfiltericon")
    /// Image `sendbtnbg`.
    static let sendbtnbg = Rswift.ImageResource(bundle: R.hostingBundle, name: "sendbtnbg")
    /// Image `servicehistryicon`.
    static let servicehistryicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "servicehistryicon")
    /// Image `servicelistimg`.
    static let servicelistimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "servicelistimg")
    /// Image `slide_1`.
    static let slide_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_1")
    /// Image `slide_2`.
    static let slide_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_2")
    /// Image `slide_3`.
    static let slide_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_3")
    /// Image `solar_wallet-linear`.
    static let solar_walletLinear = Rswift.ImageResource(bundle: R.hostingBundle, name: "solar_wallet-linear")
    /// Image `splash_back`.
    static let splash_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash_back")
    /// Image `star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "star")
    /// Image `stars`.
    static let stars = Rswift.ImageResource(bundle: R.hostingBundle, name: "stars")
    /// Image `startfrombg`.
    static let startfrombg = Rswift.ImageResource(bundle: R.hostingBundle, name: "startfrombg")
    /// Image `storefilm`.
    static let storefilm = Rswift.ImageResource(bundle: R.hostingBundle, name: "storefilm")
    /// Image `stripe`.
    static let stripe = Rswift.ImageResource(bundle: R.hostingBundle, name: "stripe")
    /// Image `success_order_img`.
    static let success_order_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "success_order_img")
    /// Image `tabler_brand-booking`.
    static let tabler_brandBooking = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabler_brand-booking")
    /// Image `termnew`.
    static let termnew = Rswift.ImageResource(bundle: R.hostingBundle, name: "termnew")
    /// Image `termsofservice`.
    static let termsofservice = Rswift.ImageResource(bundle: R.hostingBundle, name: "termsofservice")
    /// Image `thumbs_up`.
    static let thumbs_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "thumbs_up")
    /// Image `thumbs_upnew`.
    static let thumbs_upnew = Rswift.ImageResource(bundle: R.hostingBundle, name: "thumbs_upnew")
    /// Image `topup`.
    static let topup = Rswift.ImageResource(bundle: R.hostingBundle, name: "topup")
    /// Image `topupsuccess_ic`.
    static let topupsuccess_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "topupsuccess_ic")
    /// Image `transpng`.
    static let transpng = Rswift.ImageResource(bundle: R.hostingBundle, name: "transpng")
    /// Image `uaecc`.
    static let uaecc = Rswift.ImageResource(bundle: R.hostingBundle, name: "uaecc")
    /// Image `unchecked`.
    static let unchecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "unchecked")
    /// Image `uparrow`.
    static let uparrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "uparrow")
    /// Image `uploadimg`.
    static let uploadimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "uploadimg")
    /// Image `villaicon`.
    static let villaicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "villaicon")
    /// Image `vm`.
    static let vm = Rswift.ImageResource(bundle: R.hostingBundle, name: "vm")
    /// Image `wallet-add`.
    static let walletAdd = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet-add")
    /// Image `wallet`.
    static let wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet")
    /// Image `watch`.
    static let watch = Rswift.ImageResource(bundle: R.hostingBundle, name: "watch")
    /// Image `welcomebg`.
    static let welcomebg = Rswift.ImageResource(bundle: R.hostingBundle, name: "welcomebg")
    /// Image `whitecart`.
    static let whitecart = Rswift.ImageResource(bundle: R.hostingBundle, name: "whitecart")
    /// Image `writetous_ic`.
    static let writetous_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "writetous_ic")
    /// Image `writetous`.
    static let writetous = Rswift.ImageResource(bundle: R.hostingBundle, name: "writetous")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "01_Splash screen", bundle: ..., traitCollection: ...)`
    static func _SplashScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image._SplashScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "02_Onboarding screen-01 (1)", bundle: ..., traitCollection: ...)`
    static func _OnboardingScreen011(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image._OnboardingScreen011, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "02_Onboarding screen-01", bundle: ..., traitCollection: ...)`
    static func _OnboardingScreen01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image._OnboardingScreen01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ChangePassword", bundle: ..., traitCollection: ...)`
    static func changePassword(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.changePassword, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Chat28", bundle: ..., traitCollection: ...)`
    static func chat28(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat28, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Chat30", bundle: ..., traitCollection: ...)`
    static func chat30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat30, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Connection", bundle: ..., traitCollection: ...)`
    static func connection(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.connection, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse 216", bundle: ..., traitCollection: ...)`
    static func ellipse216(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse216, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse 217", bundle: ..., traitCollection: ...)`
    static func ellipse217(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse217, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse 59", bundle: ..., traitCollection: ...)`
    static func ellipse59(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse59, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse 59-1", bundle: ..., traitCollection: ...)`
    static func ellipse591(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse591, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse 84", bundle: ..., traitCollection: ...)`
    static func ellipse84(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse84, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse 85", bundle: ..., traitCollection: ...)`
    static func ellipse85(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse85, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse 86", bundle: ..., traitCollection: ...)`
    static func ellipse86(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse86, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse 87", bundle: ..., traitCollection: ...)`
    static func ellipse87(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse87, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse 88", bundle: ..., traitCollection: ...)`
    static func ellipse88(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse88, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Favorite_sml", bundle: ..., traitCollection: ...)`
    static func favorite_sml(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favorite_sml, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Favorite_sml-1", bundle: ..., traitCollection: ...)`
    static func favorite_sml1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favorite_sml1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Frame", bundle: ..., traitCollection: ...)`
    static func frame(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.frame, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Frame-1", bundle: ..., traitCollection: ...)`
    static func frame1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.frame1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Frame-2", bundle: ..., traitCollection: ...)`
    static func frame2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.frame2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group (1)", bundle: ..., traitCollection: ...)`
    static func group1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 100899", bundle: ..., traitCollection: ...)`
    static func group100899(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group100899, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 100902 (1)", bundle: ..., traitCollection: ...)`
    static func group1009021(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group1009021, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 100902", bundle: ..., traitCollection: ...)`
    static func group100902(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group100902, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 100911", bundle: ..., traitCollection: ...)`
    static func group100911(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group100911, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 100940", bundle: ..., traitCollection: ...)`
    static func group100940(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group100940, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 100944 1", bundle: ..., traitCollection: ...)`
    static func group1009441(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group1009441, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 717", bundle: ..., traitCollection: ...)`
    static func group717(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group717, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HomeTab", bundle: ..., traitCollection: ...)`
    static func homeTab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeTab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IMG_6432__1_-removebg-preview 2", bundle: ..., traitCollection: ...)`
    static func img_6432__1_RemovebgPreview2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_6432__1_RemovebgPreview2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IMG_6432__1_-removebg-preview_1-removebg-preview 1", bundle: ..., traitCollection: ...)`
    static func img_6432__1_RemovebgPreview_1RemovebgPreview1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_6432__1_RemovebgPreview_1RemovebgPreview1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icons", bundle: ..., traitCollection: ...)`
    static func icons(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icons, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Mark Video", bundle: ..., traitCollection: ...)`
    static func markVideo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.markVideo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MarkVideo60", bundle: ..., traitCollection: ...)`
    static func markVideo60(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.markVideo60, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NotifyTab", bundle: ..., traitCollection: ...)`
    static func notifyTab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notifyTab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pic", bundle: ..., traitCollection: ...)`
    static func pic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pic-1", bundle: ..., traitCollection: ...)`
    static func pic1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pic-11", bundle: ..., traitCollection: ...)`
    static func pic11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pic-12", bundle: ..., traitCollection: ...)`
    static func pic12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pic-13", bundle: ..., traitCollection: ...)`
    static func pic13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pic-14", bundle: ..., traitCollection: ...)`
    static func pic14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic14, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pic-15", bundle: ..., traitCollection: ...)`
    static func pic15(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic15, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pic-16", bundle: ..., traitCollection: ...)`
    static func pic16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic16, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pic-17", bundle: ..., traitCollection: ...)`
    static func pic17(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic17, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pic-2", bundle: ..., traitCollection: ...)`
    static func pic2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pic-3", bundle: ..., traitCollection: ...)`
    static func pic3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pic-5", bundle: ..., traitCollection: ...)`
    static func pic5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pic-6", bundle: ..., traitCollection: ...)`
    static func pic6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pic-7", bundle: ..., traitCollection: ...)`
    static func pic7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pic-8", bundle: ..., traitCollection: ...)`
    static func pic8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pic-9", bundle: ..., traitCollection: ...)`
    static func pic9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Radio", bundle: ..., traitCollection: ...)`
    static func radio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radio, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RectangleChecked", bundle: ..., traitCollection: ...)`
    static func rectangleChecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangleChecked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RectangleCheckedYellow", bundle: ..., traitCollection: ...)`
    static func rectangleCheckedYellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangleCheckedYellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RectangleUncheck", bundle: ..., traitCollection: ...)`
    static func rectangleUncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangleUncheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RectangleUncheckYellow", bundle: ..., traitCollection: ...)`
    static func rectangleUncheckYellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangleUncheckYellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Review", bundle: ..., traitCollection: ...)`
    static func review(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.review, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RightArrow18", bundle: ..., traitCollection: ...)`
    static func rightArrow18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrow18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RightIcon24", bundle: ..., traitCollection: ...)`
    static func rightIcon24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightIcon24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SettingTab", bundle: ..., traitCollection: ...)`
    static func settingTab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingTab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Star123", bundle: ..., traitCollection: ...)`
    static func star123(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star123, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "StarGreen", bundle: ..., traitCollection: ...)`
    static func starGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Time", bundle: ..., traitCollection: ...)`
    static func time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.time, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Types of Cancer", bundle: ..., traitCollection: ...)`
    static func typesOfCancer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.typesOfCancer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Vector-1", bundle: ..., traitCollection: ...)`
    static func vector1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vector1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Vector-10", bundle: ..., traitCollection: ...)`
    static func vector10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vector10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Vector-11", bundle: ..., traitCollection: ...)`
    static func vector11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vector11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Vector-12", bundle: ..., traitCollection: ...)`
    static func vector12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vector12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Vector-13", bundle: ..., traitCollection: ...)`
    static func vector13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vector13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Vector-14", bundle: ..., traitCollection: ...)`
    static func vector14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vector14, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Vector-15", bundle: ..., traitCollection: ...)`
    static func vector15(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vector15, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Vector-16", bundle: ..., traitCollection: ...)`
    static func vector16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vector16, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Vector-17", bundle: ..., traitCollection: ...)`
    static func vector17(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vector17, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Vector-4", bundle: ..., traitCollection: ...)`
    static func vector4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vector4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Vector-5", bundle: ..., traitCollection: ...)`
    static func vector5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vector5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Vector-6", bundle: ..., traitCollection: ...)`
    static func vector6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vector6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Vector-7", bundle: ..., traitCollection: ...)`
    static func vector7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vector7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Vector-8", bundle: ..., traitCollection: ...)`
    static func vector8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vector8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Vector-9", bundle: ..., traitCollection: ...)`
    static func vector9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vector9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "VectorInfo", bundle: ..., traitCollection: ...)`
    static func vectorInfo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vectorInfo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "VideoTab", bundle: ..., traitCollection: ...)`
    static func videoTab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.videoTab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "aboutimg", bundle: ..., traitCollection: ...)`
    static func aboutimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addimage", bundle: ..., traitCollection: ...)`
    static func addimage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addimage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addratingmoney_ic", bundle: ..., traitCollection: ...)`
    static func addratingmoney_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addratingmoney_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addres", bundle: ..., traitCollection: ...)`
    static func addres(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addres, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ae", bundle: ..., traitCollection: ...)`
    static func ae(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ae, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "app_icon", bundle: ..., traitCollection: ...)`
    static func app_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.app_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_green_up", bundle: ..., traitCollection: ...)`
    static func arrow_green_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_green_up, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_red_down", bundle: ..., traitCollection: ...)`
    static func arrow_red_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_red_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "b", bundle: ..., traitCollection: ...)`
    static func b(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.b, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "banner1", bundle: ..., traitCollection: ...)`
    static func banner1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.banner1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "banner2", bundle: ..., traitCollection: ...)`
    static func banner2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.banner2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "black_back", bundle: ..., traitCollection: ...)`
    static func black_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.black_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "boxicon", bundle: ..., traitCollection: ...)`
    static func boxicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boxicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "call", bundle: ..., traitCollection: ...)`
    static func call(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.call, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "callicon", bundle: ..., traitCollection: ...)`
    static func callicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.callicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancel", bundle: ..., traitCollection: ...)`
    static func cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancelRed", bundle: ..., traitCollection: ...)`
    static func cancelRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancelRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cart", bundle: ..., traitCollection: ...)`
    static func cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat1", bundle: ..., traitCollection: ...)`
    static func cat1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat2", bundle: ..., traitCollection: ...)`
    static func cat2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat3", bundle: ..., traitCollection: ...)`
    static func cat3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat4", bundle: ..., traitCollection: ...)`
    static func cat4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat5", bundle: ..., traitCollection: ...)`
    static func cat5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat6", bundle: ..., traitCollection: ...)`
    static func cat6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat7", bundle: ..., traitCollection: ...)`
    static func cat7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat8", bundle: ..., traitCollection: ...)`
    static func cat8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat9", bundle: ..., traitCollection: ...)`
    static func cat9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat", bundle: ..., traitCollection: ...)`
    static func chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chaticon", bundle: ..., traitCollection: ...)`
    static func chaticon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chaticon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checked", bundle: ..., traitCollection: ...)`
    static func checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "circle_back", bundle: ..., traitCollection: ...)`
    static func circle_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circle_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clocation", bundle: ..., traitCollection: ...)`
    static func clocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clocation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "congratulationicon", bundle: ..., traitCollection: ...)`
    static func congratulationicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.congratulationicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "contacticon", bundle: ..., traitCollection: ...)`
    static func contacticon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contacticon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "contractorimg", bundle: ..., traitCollection: ...)`
    static func contractorimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contractorimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cotwoavoid_ic", bundle: ..., traitCollection: ...)`
    static func cotwoavoid_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cotwoavoid_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "crossicon", bundle: ..., traitCollection: ...)`
    static func crossicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crossicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete", bundle: ..., traitCollection: ...)`
    static func delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "devicon_google", bundle: ..., traitCollection: ...)`
    static func devicon_google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.devicon_google, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "discount_food_big_img", bundle: ..., traitCollection: ...)`
    static func discount_food_big_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.discount_food_big_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "discountimg2", bundle: ..., traitCollection: ...)`
    static func discountimg2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.discountimg2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "doctor", bundle: ..., traitCollection: ...)`
    static func doctor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doctor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "downarow", bundle: ..., traitCollection: ...)`
    static func downarow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downarow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "drawer_icon", bundle: ..., traitCollection: ...)`
    static func drawer_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drawer_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit", bundle: ..., traitCollection: ...)`
    static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "editnewicon16", bundle: ..., traitCollection: ...)`
    static func editnewicon16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editnewicon16, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "editproicon", bundle: ..., traitCollection: ...)`
    static func editproicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editproicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_cart", bundle: ..., traitCollection: ...)`
    static func empty_cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_notification", bundle: ..., traitCollection: ...)`
    static func empty_notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_transaction", bundle: ..., traitCollection: ...)`
    static func empty_transaction(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_transaction, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ep_setting", bundle: ..., traitCollection: ...)`
    static func ep_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ep_setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "faq", bundle: ..., traitCollection: ...)`
    static func faq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.faq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fav", bundle: ..., traitCollection: ...)`
    static func fav(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fav, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fav_selected", bundle: ..., traitCollection: ...)`
    static func fav_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fav_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favorite", bundle: ..., traitCollection: ...)`
    static func favorite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favorite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter", bundle: ..., traitCollection: ...)`
    static func filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "food_details", bundle: ..., traitCollection: ...)`
    static func food_details(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.food_details, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "foodimg", bundle: ..., traitCollection: ...)`
    static func foodimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.foodimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "forward_ic", bundle: ..., traitCollection: ...)`
    static func forward_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forward_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "googleplus", bundle: ..., traitCollection: ...)`
    static func googleplus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.googleplus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "grey_call", bundle: ..., traitCollection: ...)`
    static func grey_call(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grey_call, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "grey_icon (2)", bundle: ..., traitCollection: ...)`
    static func grey_icon2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grey_icon2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "grey_round_edge_back", bundle: ..., traitCollection: ...)`
    static func grey_round_edge_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grey_round_edge_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "greyblackback", bundle: ..., traitCollection: ...)`
    static func greyblackback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greyblackback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "greyclock", bundle: ..., traitCollection: ...)`
    static func greyclock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greyclock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gridicon", bundle: ..., traitCollection: ...)`
    static func gridicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gridicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gridicons_location", bundle: ..., traitCollection: ...)`
    static func gridicons_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gridicons_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "help", bundle: ..., traitCollection: ...)`
    static func help(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.help, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home-2", bundle: ..., traitCollection: ...)`
    static func home2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home-2-1", bundle: ..., traitCollection: ...)`
    static func home21(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home21, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "homeicon", bundle: ..., traitCollection: ...)`
    static func homeicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_CheckedCircle_Black", bundle: ..., traitCollection: ...)`
    static func ic_CheckedCircle_Black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_CheckedCircle_Black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_Circle_Black", bundle: ..., traitCollection: ...)`
    static func ic_Circle_Black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_Circle_Black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_back", bundle: ..., traitCollection: ...)`
    static func ic_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_forward", bundle: ..., traitCollection: ...)`
    static func ic_forward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_forward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_outline-home", bundle: ..., traitCollection: ...)`
    static func ic_outlineHome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_outlineHome, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconamoon_profile-bold", bundle: ..., traitCollection: ...)`
    static func iconamoon_profileBold(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconamoon_profileBold, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "imageuploadicon", bundle: ..., traitCollection: ...)`
    static func imageuploadicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageuploadicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img", bundle: ..., traitCollection: ...)`
    static func img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "input2", bundle: ..., traitCollection: ...)`
    static func input2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.input2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "invitefriend", bundle: ..., traitCollection: ...)`
    static func invitefriend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.invitefriend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "invitefriend_big_ic", bundle: ..., traitCollection: ...)`
    static func invitefriend_big_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.invitefriend_big_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "invitefriend_big_ic1", bundle: ..., traitCollection: ...)`
    static func invitefriend_big_ic1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.invitefriend_big_ic1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "knet", bundle: ..., traitCollection: ...)`
    static func knet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.knet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "line", bundle: ..., traitCollection: ...)`
    static func line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.line, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location_grey", bundle: ..., traitCollection: ...)`
    static func location_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_grey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logobackgrey", bundle: ..., traitCollection: ...)`
    static func logobackgrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logobackgrey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "macdonladicon", bundle: ..., traitCollection: ...)`
    static func macdonladicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.macdonladicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mage_filter", bundle: ..., traitCollection: ...)`
    static func mage_filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mage_filter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "magic_bag2", bundle: ..., traitCollection: ...)`
    static func magic_bag2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.magic_bag2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "magic_bag_big_image", bundle: ..., traitCollection: ...)`
    static func magic_bag_big_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.magic_bag_big_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "map", bundle: ..., traitCollection: ...)`
    static func map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mapicon", bundle: ..., traitCollection: ...)`
    static func mapicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mapiconnew", bundle: ..., traitCollection: ...)`
    static func mapiconnew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapiconnew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mapimg", bundle: ..., traitCollection: ...)`
    static func mapimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "md", bundle: ..., traitCollection: ...)`
    static func md(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.md, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mdi_invite", bundle: ..., traitCollection: ...)`
    static func mdi_invite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mdi_invite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mf", bundle: ..., traitCollection: ...)`
    static func mf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "minus", bundle: ..., traitCollection: ...)`
    static func minus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.minus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "money_saved", bundle: ..., traitCollection: ...)`
    static func money_saved(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.money_saved, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "moneysaved_ic", bundle: ..., traitCollection: ...)`
    static func moneysaved_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moneysaved_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "more", bundle: ..., traitCollection: ...)`
    static func more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mpgs", bundle: ..., traitCollection: ...)`
    static func mpgs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mpgs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mycart", bundle: ..., traitCollection: ...)`
    static func mycart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mycart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "myserviceicon", bundle: ..., traitCollection: ...)`
    static func myserviceicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myserviceicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "next", bundle: ..., traitCollection: ...)`
    static func next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.next, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "noitem", bundle: ..., traitCollection: ...)`
    static func noitem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noitem, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nonotiicon", bundle: ..., traitCollection: ...)`
    static func nonotiicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nonotiicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification", bundle: ..., traitCollection: ...)`
    static func notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification-1", bundle: ..., traitCollection: ...)`
    static func notification1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification_bell", bundle: ..., traitCollection: ...)`
    static func notification_bell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification_bell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notiimage", bundle: ..., traitCollection: ...)`
    static func notiimage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notiimage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "np", bundle: ..., traitCollection: ...)`
    static func np(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.np, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "officeicon", bundle: ..., traitCollection: ...)`
    static func officeicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.officeicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "order_active", bundle: ..., traitCollection: ...)`
    static func order_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.order_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "order_deactive", bundle: ..., traitCollection: ...)`
    static func order_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.order_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ordershead", bundle: ..., traitCollection: ...)`
    static func ordershead(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ordershead, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "password", bundle: ..., traitCollection: ...)`
    static func password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.password, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ph_wallet", bundle: ..., traitCollection: ...)`
    static func ph_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ph_wallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pin", bundle: ..., traitCollection: ...)`
    static func pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pinone", bundle: ..., traitCollection: ...)`
    static func pinone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pinone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pinthree", bundle: ..., traitCollection: ...)`
    static func pinthree(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pinthree, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pintwo", bundle: ..., traitCollection: ...)`
    static func pintwo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pintwo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder_Blank", bundle: ..., traitCollection: ...)`
    static func placeholder_Blank(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_Blank, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plumberimg", bundle: ..., traitCollection: ...)`
    static func plumberimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plumberimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus1", bundle: ..., traitCollection: ...)`
    static func plus1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus_grey", bundle: ..., traitCollection: ...)`
    static func plus_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus_grey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "privacy", bundle: ..., traitCollection: ...)`
    static func privacy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.privacy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile", bundle: ..., traitCollection: ...)`
    static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_ic", bundle: ..., traitCollection: ...)`
    static func profile_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "prop", bundle: ..., traitCollection: ...)`
    static func prop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.prop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "providericon", bundle: ..., traitCollection: ...)`
    static func providericon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.providericon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "providerimg", bundle: ..., traitCollection: ...)`
    static func providerimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.providerimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "questionicon", bundle: ..., traitCollection: ...)`
    static func questionicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.questionicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rest_image", bundle: ..., traitCollection: ...)`
    static func rest_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rest_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rest_image2", bundle: ..., traitCollection: ...)`
    static func rest_image2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rest_image2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "righticon", bundle: ..., traitCollection: ...)`
    static func righticon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.righticon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sadad", bundle: ..., traitCollection: ...)`
    static func sadad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sadad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "searchfilm", bundle: ..., traitCollection: ...)`
    static func searchfilm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchfilm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "searchfiltericon", bundle: ..., traitCollection: ...)`
    static func searchfiltericon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchfiltericon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sendbtnbg", bundle: ..., traitCollection: ...)`
    static func sendbtnbg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendbtnbg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "servicehistryicon", bundle: ..., traitCollection: ...)`
    static func servicehistryicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.servicehistryicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "servicelistimg", bundle: ..., traitCollection: ...)`
    static func servicelistimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.servicelistimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_1", bundle: ..., traitCollection: ...)`
    static func slide_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_2", bundle: ..., traitCollection: ...)`
    static func slide_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_3", bundle: ..., traitCollection: ...)`
    static func slide_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "solar_wallet-linear", bundle: ..., traitCollection: ...)`
    static func solar_walletLinear(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.solar_walletLinear, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "splash_back", bundle: ..., traitCollection: ...)`
    static func splash_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stars", bundle: ..., traitCollection: ...)`
    static func stars(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stars, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "startfrombg", bundle: ..., traitCollection: ...)`
    static func startfrombg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.startfrombg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "storefilm", bundle: ..., traitCollection: ...)`
    static func storefilm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.storefilm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stripe", bundle: ..., traitCollection: ...)`
    static func stripe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stripe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "success_order_img", bundle: ..., traitCollection: ...)`
    static func success_order_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.success_order_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabler_brand-booking", bundle: ..., traitCollection: ...)`
    static func tabler_brandBooking(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabler_brandBooking, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "termnew", bundle: ..., traitCollection: ...)`
    static func termnew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.termnew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "termsofservice", bundle: ..., traitCollection: ...)`
    static func termsofservice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.termsofservice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "thumbs_up", bundle: ..., traitCollection: ...)`
    static func thumbs_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumbs_up, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "thumbs_upnew", bundle: ..., traitCollection: ...)`
    static func thumbs_upnew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumbs_upnew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "topup", bundle: ..., traitCollection: ...)`
    static func topup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.topup, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "topupsuccess_ic", bundle: ..., traitCollection: ...)`
    static func topupsuccess_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.topupsuccess_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "transpng", bundle: ..., traitCollection: ...)`
    static func transpng(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transpng, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uaecc", bundle: ..., traitCollection: ...)`
    static func uaecc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uaecc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unchecked", bundle: ..., traitCollection: ...)`
    static func unchecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unchecked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uparrow", bundle: ..., traitCollection: ...)`
    static func uparrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uparrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uploadimg", bundle: ..., traitCollection: ...)`
    static func uploadimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uploadimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "villaicon", bundle: ..., traitCollection: ...)`
    static func villaicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.villaicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vm", bundle: ..., traitCollection: ...)`
    static func vm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet", bundle: ..., traitCollection: ...)`
    static func wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet-add", bundle: ..., traitCollection: ...)`
    static func walletAdd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walletAdd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "watch", bundle: ..., traitCollection: ...)`
    static func watch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.watch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "welcomebg", bundle: ..., traitCollection: ...)`
    static func welcomebg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcomebg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "whitecart", bundle: ..., traitCollection: ...)`
    static func whitecart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whitecart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "writetous", bundle: ..., traitCollection: ...)`
    static func writetous(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.writetous, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "writetous_ic", bundle: ..., traitCollection: ...)`
    static func writetous_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.writetous_ic, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 12 nibs.
  struct nib {
    /// Nib `AppointmentCell`.
    static let appointmentCell = _R.nib._AppointmentCell()
    /// Nib `ChatCell`.
    static let chatCell = _R.nib._ChatCell()
    /// Nib `DegreeCell`.
    static let degreeCell = _R.nib._DegreeCell()
    /// Nib `DoctorDetailCell`.
    static let doctorDetailCell = _R.nib._DoctorDetailCell()
    /// Nib `NotifyCell`.
    static let notifyCell = _R.nib._NotifyCell()
    /// Nib `ProviderTimeCell`.
    static let providerTimeCell = _R.nib._ProviderTimeCell()
    /// Nib `ReportCell`.
    static let reportCell = _R.nib._ReportCell()
    /// Nib `ReviewCell`.
    static let reviewCell = _R.nib._ReviewCell()
    /// Nib `TimeSlotCell`.
    static let timeSlotCell = _R.nib._TimeSlotCell()
    /// Nib `UserBookingCell`.
    static let userBookingCell = _R.nib._UserBookingCell()
    /// Nib `VideoChatCell`.
    static let videoChatCell = _R.nib._VideoChatCell()
    /// Nib `WeeklyScheduleCell`.
    static let weeklyScheduleCell = _R.nib._WeeklyScheduleCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AppointmentCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.appointmentCell) instead")
    static func appointmentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.appointmentCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChatCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatCell) instead")
    static func chatCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DegreeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.degreeCell) instead")
    static func degreeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.degreeCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DoctorDetailCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.doctorDetailCell) instead")
    static func doctorDetailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.doctorDetailCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotifyCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notifyCell) instead")
    static func notifyCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notifyCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderTimeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerTimeCell) instead")
    static func providerTimeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerTimeCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ReportCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.reportCell) instead")
    static func reportCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reportCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ReviewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.reviewCell) instead")
    static func reviewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reviewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TimeSlotCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.timeSlotCell) instead")
    static func timeSlotCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.timeSlotCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserBookingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userBookingCell) instead")
    static func userBookingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userBookingCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VideoChatCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoChatCell) instead")
    static func videoChatCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoChatCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WeeklyScheduleCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.weeklyScheduleCell) instead")
    static func weeklyScheduleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.weeklyScheduleCell)
    }
    #endif

    static func appointmentCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AppointmentCell? {
      return R.nib.appointmentCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppointmentCell
    }

    static func chatCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatCell? {
      return R.nib.chatCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatCell
    }

    static func degreeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DegreeCell? {
      return R.nib.degreeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DegreeCell
    }

    static func doctorDetailCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DoctorDetailCell? {
      return R.nib.doctorDetailCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DoctorDetailCell
    }

    static func notifyCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotifyCell? {
      return R.nib.notifyCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotifyCell
    }

    static func providerTimeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderTimeCell? {
      return R.nib.providerTimeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderTimeCell
    }

    static func reportCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReportCell? {
      return R.nib.reportCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReportCell
    }

    static func reviewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReviewCell? {
      return R.nib.reviewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReviewCell
    }

    static func timeSlotCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TimeSlotCell? {
      return R.nib.timeSlotCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TimeSlotCell
    }

    static func userBookingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserBookingCell? {
      return R.nib.userBookingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserBookingCell
    }

    static func videoChatCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VideoChatCell? {
      return R.nib.videoChatCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VideoChatCell
    }

    static func weeklyScheduleCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeeklyScheduleCell? {
      return R.nib.weeklyScheduleCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeeklyScheduleCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 13 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AppointmentCell`.
    static let appointmentCell: Rswift.ReuseIdentifier<AppointmentCell> = Rswift.ReuseIdentifier(identifier: "AppointmentCell")
    /// Reuse identifier `ChatCell`.
    static let chatCell: Rswift.ReuseIdentifier<ChatCell> = Rswift.ReuseIdentifier(identifier: "ChatCell")
    /// Reuse identifier `ChatImageCell`.
    static let chatImageCell: Rswift.ReuseIdentifier<ChatImageCell> = Rswift.ReuseIdentifier(identifier: "ChatImageCell")
    /// Reuse identifier `ConversationCell`.
    static let conversationCell: Rswift.ReuseIdentifier<ConversationCell> = Rswift.ReuseIdentifier(identifier: "ConversationCell")
    /// Reuse identifier `DegreeCell`.
    static let degreeCell: Rswift.ReuseIdentifier<DegreeCell> = Rswift.ReuseIdentifier(identifier: "DegreeCell")
    /// Reuse identifier `NotifyCell`.
    static let notifyCell: Rswift.ReuseIdentifier<NotifyCell> = Rswift.ReuseIdentifier(identifier: "NotifyCell")
    /// Reuse identifier `ProviderTimeCell`.
    static let providerTimeCell: Rswift.ReuseIdentifier<ProviderTimeCell> = Rswift.ReuseIdentifier(identifier: "ProviderTimeCell")
    /// Reuse identifier `ReportCell`.
    static let reportCell: Rswift.ReuseIdentifier<ReportCell> = Rswift.ReuseIdentifier(identifier: "ReportCell")
    /// Reuse identifier `ReviewCell`.
    static let reviewCell: Rswift.ReuseIdentifier<ReviewCell> = Rswift.ReuseIdentifier(identifier: "ReviewCell")
    /// Reuse identifier `TimeSlotCell`.
    static let timeSlotCell: Rswift.ReuseIdentifier<TimeSlotCell> = Rswift.ReuseIdentifier(identifier: "TimeSlotCell")
    /// Reuse identifier `UserBookingCell`.
    static let userBookingCell: Rswift.ReuseIdentifier<UserBookingCell> = Rswift.ReuseIdentifier(identifier: "UserBookingCell")
    /// Reuse identifier `VideoChatCell`.
    static let videoChatCell: Rswift.ReuseIdentifier<VideoChatCell> = Rswift.ReuseIdentifier(identifier: "VideoChatCell")
    /// Reuse identifier `searchLocationCell`.
    static let searchLocationCell: Rswift.ReuseIdentifier<SearchLocationCell> = Rswift.ReuseIdentifier(identifier: "searchLocationCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AppointmentCell.validate()
      try _ChatCell.validate()
      try _DoctorDetailCell.validate()
      try _ReviewCell.validate()
      try _UserBookingCell.validate()
      try _VideoChatCell.validate()
      try _WeeklyScheduleCell.validate()
    }

    struct _AppointmentCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AppointmentCell

      let bundle = R.hostingBundle
      let identifier = "AppointmentCell"
      let name = "AppointmentCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AppointmentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppointmentCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "StarGreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'StarGreen' is used in nib 'AppointmentCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "doctor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'doctor' is used in nib 'AppointmentCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "gridicons_location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gridicons_location' is used in nib 'AppointmentCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Button", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Button' is used in nib 'AppointmentCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Top", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Top' is used in nib 'AppointmentCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ChatCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ChatCell

      let bundle = R.hostingBundle
      let identifier = "ChatCell"
      let name = "ChatCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Ellipse 59-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Ellipse 59-1' is used in nib 'ChatCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _DegreeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DegreeCell

      let bundle = R.hostingBundle
      let identifier = "DegreeCell"
      let name = "DegreeCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DegreeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DegreeCell
      }

      fileprivate init() {}
    }

    struct _DoctorDetailCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DoctorDetailCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DoctorDetailCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DoctorDetailCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Ellipse 85", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Ellipse 85' is used in nib 'DoctorDetailCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Star123", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Star123' is used in nib 'DoctorDetailCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Time", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Time' is used in nib 'DoctorDetailCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Top", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Top' is used in nib 'DoctorDetailCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _NotifyCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NotifyCell

      let bundle = R.hostingBundle
      let identifier = "NotifyCell"
      let name = "NotifyCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotifyCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotifyCell
      }

      fileprivate init() {}
    }

    struct _ProviderTimeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ProviderTimeCell

      let bundle = R.hostingBundle
      let identifier = "ProviderTimeCell"
      let name = "ProviderTimeCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderTimeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderTimeCell
      }

      fileprivate init() {}
    }

    struct _ReportCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ReportCell

      let bundle = R.hostingBundle
      let identifier = "ReportCell"
      let name = "ReportCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReportCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReportCell
      }

      fileprivate init() {}
    }

    struct _ReviewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ReviewCell

      let bundle = R.hostingBundle
      let identifier = "ReviewCell"
      let name = "ReviewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReviewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReviewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "profile_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile_ic' is used in nib 'ReviewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TimeSlotCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TimeSlotCell

      let bundle = R.hostingBundle
      let identifier = "TimeSlotCell"
      let name = "TimeSlotCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TimeSlotCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TimeSlotCell
      }

      fileprivate init() {}
    }

    struct _UserBookingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UserBookingCell

      let bundle = R.hostingBundle
      let identifier = "UserBookingCell"
      let name = "UserBookingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserBookingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserBookingCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "gridicons_location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gridicons_location' is used in nib 'UserBookingCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile1' is used in nib 'UserBookingCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Button", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Button' is used in nib 'UserBookingCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Top", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Top' is used in nib 'UserBookingCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _VideoChatCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = VideoChatCell

      let bundle = R.hostingBundle
      let identifier = "VideoChatCell"
      let name = "VideoChatCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VideoChatCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VideoChatCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Ellipse 59-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Ellipse 59-1' is used in nib 'VideoChatCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Mark Video", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Mark Video' is used in nib 'VideoChatCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WeeklyScheduleCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WeeklyScheduleCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeeklyScheduleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeeklyScheduleCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "RectangleCheckedYellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RectangleCheckedYellow' is used in nib 'WeeklyScheduleCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "01_Splash screen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '01_Splash screen' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 100940", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 100940' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = DoctorInfoVC

      let addressPickerVC = StoryboardViewControllerResource<AddressPickerVC>(identifier: "AddressPickerVC")
      let appointmentDetailVC = StoryboardViewControllerResource<AppointmentDetailVC>(identifier: "AppointmentDetailVC")
      let bundle = R.hostingBundle
      let cancerSubTypeVC = StoryboardViewControllerResource<CancerSubTypeVC>(identifier: "CancerSubTypeVC")
      let cancerTypeVC = StoryboardViewControllerResource<CancerTypeVC>(identifier: "CancerTypeVC")
      let changePasswodVC = StoryboardViewControllerResource<ChangePasswodVC>(identifier: "ChangePasswodVC")
      let confirmPopVC = StoryboardViewControllerResource<ConfirmPopVC>(identifier: "ConfirmPopVC")
      let conversationVC = StoryboardViewControllerResource<ConversationVC>(identifier: "ConversationVC")
      let doRatingVC = StoryboardViewControllerResource<DoRatingVC>(identifier: "DoRatingVC")
      let doctorDetailVC = StoryboardViewControllerResource<DoctorDetailVC>(identifier: "DoctorDetailVC")
      let doctorInfoVC = StoryboardViewControllerResource<DoctorInfoVC>(identifier: "DoctorInfoVC")
      let doctorTabBarVC = StoryboardViewControllerResource<DoctorTabBarVC>(identifier: "DoctorTabBarVC")
      let editProfileVC = StoryboardViewControllerResource<EditProfileVC>(identifier: "EditProfileVC")
      let fatoorahPaymentVC = StoryboardViewControllerResource<FatoorahPaymentVC>(identifier: "FatoorahPaymentVC")
      let forgotPasswordVC = StoryboardViewControllerResource<ForgotPasswordVC>(identifier: "ForgotPasswordVC")
      let helpVC = StoryboardViewControllerResource<HelpVC>(identifier: "HelpVC")
      let homeVC = StoryboardViewControllerResource<HomeVC>(identifier: "HomeVC")
      let languageVC = StoryboardViewControllerResource<LanguageVC>(identifier: "LanguageVC")
      let loginTypeVC = StoryboardViewControllerResource<LoginTypeVC>(identifier: "LoginTypeVC")
      let loginVC = StoryboardViewControllerResource<LoginVC>(identifier: "LoginVC")
      let name = "Main"
      let notificationVC = StoryboardViewControllerResource<NotificationVC>(identifier: "NotificationVC")
      let onboardingVC = StoryboardViewControllerResource<OnboardingVC>(identifier: "OnboardingVC")
      let otpVC = StoryboardViewControllerResource<OtpVC>(identifier: "OtpVC")
      let patientInfoVC = StoryboardViewControllerResource<PatientInfoVC>(identifier: "PatientInfoVC")
      let patientTabBarVC = StoryboardViewControllerResource<PatientTabBarVC>(identifier: "PatientTabBarVC")
      let paymentVC = StoryboardViewControllerResource<PaymentVC>(identifier: "PaymentVC")
      let presentTimeScheduleVC = StoryboardViewControllerResource<PresentTimeScheduleVC>(identifier: "PresentTimeScheduleVC")
      let qualificationVC = StoryboardViewControllerResource<QualificationVC>(identifier: "QualificationVC")
      let reportsVC = StoryboardViewControllerResource<ReportsVC>(identifier: "ReportsVC")
      let signupVC = StoryboardViewControllerResource<SignupVC>(identifier: "SignupVC")
      let userBookingVC = StoryboardViewControllerResource<UserBookingVC>(identifier: "UserBookingVC")
      let userChatVC = StoryboardViewControllerResource<ChatVC>(identifier: "UserChatVC")
      let userHomeVC = StoryboardViewControllerResource<UserHomeVC>(identifier: "UserHomeVC")
      let userReviewVC = StoryboardViewControllerResource<UserReviewVC>(identifier: "UserReviewVC")
      let userSettingVC = StoryboardViewControllerResource<SettingVC>(identifier: "UserSettingVC")
      let vedioChatVC = StoryboardViewControllerResource<VideoChatVC>(identifier: "VedioChatVC")
      let virtualCrabConnectionVC = StoryboardViewControllerResource<VirtualCrabConnectionVC>(identifier: "VirtualCrabConnectionVC")
      let walletVC = StoryboardViewControllerResource<WalletVC>(identifier: "WalletVC")
      let weeklyScheduleVC = StoryboardViewControllerResource<WeeklyScheduleVC>(identifier: "WeeklyScheduleVC")

      func addressPickerVC(_: Void = ()) -> AddressPickerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addressPickerVC)
      }

      func appointmentDetailVC(_: Void = ()) -> AppointmentDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: appointmentDetailVC)
      }

      func cancerSubTypeVC(_: Void = ()) -> CancerSubTypeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cancerSubTypeVC)
      }

      func cancerTypeVC(_: Void = ()) -> CancerTypeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cancerTypeVC)
      }

      func changePasswodVC(_: Void = ()) -> ChangePasswodVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePasswodVC)
      }

      func confirmPopVC(_: Void = ()) -> ConfirmPopVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: confirmPopVC)
      }

      func conversationVC(_: Void = ()) -> ConversationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: conversationVC)
      }

      func doRatingVC(_: Void = ()) -> DoRatingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: doRatingVC)
      }

      func doctorDetailVC(_: Void = ()) -> DoctorDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: doctorDetailVC)
      }

      func doctorInfoVC(_: Void = ()) -> DoctorInfoVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: doctorInfoVC)
      }

      func doctorTabBarVC(_: Void = ()) -> DoctorTabBarVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: doctorTabBarVC)
      }

      func editProfileVC(_: Void = ()) -> EditProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileVC)
      }

      func fatoorahPaymentVC(_: Void = ()) -> FatoorahPaymentVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: fatoorahPaymentVC)
      }

      func forgotPasswordVC(_: Void = ()) -> ForgotPasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordVC)
      }

      func helpVC(_: Void = ()) -> HelpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: helpVC)
      }

      func homeVC(_: Void = ()) -> HomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeVC)
      }

      func languageVC(_: Void = ()) -> LanguageVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: languageVC)
      }

      func loginTypeVC(_: Void = ()) -> LoginTypeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginTypeVC)
      }

      func loginVC(_: Void = ()) -> LoginVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }

      func notificationVC(_: Void = ()) -> NotificationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationVC)
      }

      func onboardingVC(_: Void = ()) -> OnboardingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onboardingVC)
      }

      func otpVC(_: Void = ()) -> OtpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: otpVC)
      }

      func patientInfoVC(_: Void = ()) -> PatientInfoVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: patientInfoVC)
      }

      func patientTabBarVC(_: Void = ()) -> PatientTabBarVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: patientTabBarVC)
      }

      func paymentVC(_: Void = ()) -> PaymentVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentVC)
      }

      func presentTimeScheduleVC(_: Void = ()) -> PresentTimeScheduleVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: presentTimeScheduleVC)
      }

      func qualificationVC(_: Void = ()) -> QualificationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qualificationVC)
      }

      func reportsVC(_: Void = ()) -> ReportsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: reportsVC)
      }

      func signupVC(_: Void = ()) -> SignupVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signupVC)
      }

      func userBookingVC(_: Void = ()) -> UserBookingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userBookingVC)
      }

      func userChatVC(_: Void = ()) -> ChatVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userChatVC)
      }

      func userHomeVC(_: Void = ()) -> UserHomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userHomeVC)
      }

      func userReviewVC(_: Void = ()) -> UserReviewVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userReviewVC)
      }

      func userSettingVC(_: Void = ()) -> SettingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userSettingVC)
      }

      func vedioChatVC(_: Void = ()) -> VideoChatVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: vedioChatVC)
      }

      func virtualCrabConnectionVC(_: Void = ()) -> VirtualCrabConnectionVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: virtualCrabConnectionVC)
      }

      func walletVC(_: Void = ()) -> WalletVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletVC)
      }

      func weeklyScheduleVC(_: Void = ()) -> WeeklyScheduleVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: weeklyScheduleVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "02_Onboarding screen-01", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '02_Onboarding screen-01' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ChangePassword", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ChangePassword' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Connection", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Connection' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Ellipse 59", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Ellipse 59' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Ellipse 59-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Ellipse 59-1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Ellipse 85", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Ellipse 85' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group (1)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group (1)' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 100944 1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 100944 1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 717", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 717' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "HomeTab", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'HomeTab' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Language", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Language' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Logout", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Logout' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Mark Video", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Mark Video' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "MarkVideo60", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MarkVideo60' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "NotifyTab", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NotifyTab' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "RectangleUncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RectangleUncheck' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Review", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Review' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "RightIcon24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RightIcon24' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SettingTab", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SettingTab' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Star123", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Star123' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Time", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Time' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Types of Cancer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Types of Cancer' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "VectorInfo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'VectorInfo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "VideoTab", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'VideoTab' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "addimage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'addimage' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cancel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cancel' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cancelRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cancelRed' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chaticon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chaticon' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.down") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chevron.down' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.right") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chevron.right' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "circle_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'circle_back' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "clocation", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clocation' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "crossicon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'crossicon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "devicon_google", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'devicon_google' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "doctor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'doctor' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "doctorimg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'doctorimg' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "editnewicon16", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'editnewicon16' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "filtericon1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'filtericon1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fluent_chat-16-regular", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fluent_chat-16-regular' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "gridicons_location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gridicons_location' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Circle_Black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_Circle_Black' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconamoon_profile-bold", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconamoon_profile-bold' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "image 2355", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image 2355' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "imageuploadicon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageuploadicon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ph_wallet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ph_wallet' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pin' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder_Blank", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_Blank' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "providerimg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'providerimg' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "searchfiltericon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'searchfiltericon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sendbtnnew", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sendbtnnew' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "thumbs_upnew", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'thumbs_upnew' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "uploadimg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'uploadimg' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wallet-add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wallet-add' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "AccentColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AccentColor' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Button", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Button' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Gradiant0", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Gradiant0' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Gradiant1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Gradiant1' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Top", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Top' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Top Light", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Top Light' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().addressPickerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addressPickerVC' could not be loaded from storyboard 'Main' as 'AddressPickerVC'.") }
        if _R.storyboard.main().appointmentDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'appointmentDetailVC' could not be loaded from storyboard 'Main' as 'AppointmentDetailVC'.") }
        if _R.storyboard.main().cancerSubTypeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cancerSubTypeVC' could not be loaded from storyboard 'Main' as 'CancerSubTypeVC'.") }
        if _R.storyboard.main().cancerTypeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cancerTypeVC' could not be loaded from storyboard 'Main' as 'CancerTypeVC'.") }
        if _R.storyboard.main().changePasswodVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePasswodVC' could not be loaded from storyboard 'Main' as 'ChangePasswodVC'.") }
        if _R.storyboard.main().confirmPopVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'confirmPopVC' could not be loaded from storyboard 'Main' as 'ConfirmPopVC'.") }
        if _R.storyboard.main().conversationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'conversationVC' could not be loaded from storyboard 'Main' as 'ConversationVC'.") }
        if _R.storyboard.main().doRatingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'doRatingVC' could not be loaded from storyboard 'Main' as 'DoRatingVC'.") }
        if _R.storyboard.main().doctorDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'doctorDetailVC' could not be loaded from storyboard 'Main' as 'DoctorDetailVC'.") }
        if _R.storyboard.main().doctorInfoVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'doctorInfoVC' could not be loaded from storyboard 'Main' as 'DoctorInfoVC'.") }
        if _R.storyboard.main().doctorTabBarVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'doctorTabBarVC' could not be loaded from storyboard 'Main' as 'DoctorTabBarVC'.") }
        if _R.storyboard.main().editProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileVC' could not be loaded from storyboard 'Main' as 'EditProfileVC'.") }
        if _R.storyboard.main().fatoorahPaymentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'fatoorahPaymentVC' could not be loaded from storyboard 'Main' as 'FatoorahPaymentVC'.") }
        if _R.storyboard.main().forgotPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordVC' could not be loaded from storyboard 'Main' as 'ForgotPasswordVC'.") }
        if _R.storyboard.main().helpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'helpVC' could not be loaded from storyboard 'Main' as 'HelpVC'.") }
        if _R.storyboard.main().homeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'Main' as 'HomeVC'.") }
        if _R.storyboard.main().languageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'languageVC' could not be loaded from storyboard 'Main' as 'LanguageVC'.") }
        if _R.storyboard.main().loginTypeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginTypeVC' could not be loaded from storyboard 'Main' as 'LoginTypeVC'.") }
        if _R.storyboard.main().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Main' as 'LoginVC'.") }
        if _R.storyboard.main().notificationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationVC' could not be loaded from storyboard 'Main' as 'NotificationVC'.") }
        if _R.storyboard.main().onboardingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onboardingVC' could not be loaded from storyboard 'Main' as 'OnboardingVC'.") }
        if _R.storyboard.main().otpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'otpVC' could not be loaded from storyboard 'Main' as 'OtpVC'.") }
        if _R.storyboard.main().patientInfoVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'patientInfoVC' could not be loaded from storyboard 'Main' as 'PatientInfoVC'.") }
        if _R.storyboard.main().patientTabBarVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'patientTabBarVC' could not be loaded from storyboard 'Main' as 'PatientTabBarVC'.") }
        if _R.storyboard.main().paymentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentVC' could not be loaded from storyboard 'Main' as 'PaymentVC'.") }
        if _R.storyboard.main().presentTimeScheduleVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'presentTimeScheduleVC' could not be loaded from storyboard 'Main' as 'PresentTimeScheduleVC'.") }
        if _R.storyboard.main().qualificationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qualificationVC' could not be loaded from storyboard 'Main' as 'QualificationVC'.") }
        if _R.storyboard.main().reportsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'reportsVC' could not be loaded from storyboard 'Main' as 'ReportsVC'.") }
        if _R.storyboard.main().signupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signupVC' could not be loaded from storyboard 'Main' as 'SignupVC'.") }
        if _R.storyboard.main().userBookingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userBookingVC' could not be loaded from storyboard 'Main' as 'UserBookingVC'.") }
        if _R.storyboard.main().userChatVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userChatVC' could not be loaded from storyboard 'Main' as 'ChatVC'.") }
        if _R.storyboard.main().userHomeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userHomeVC' could not be loaded from storyboard 'Main' as 'UserHomeVC'.") }
        if _R.storyboard.main().userReviewVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userReviewVC' could not be loaded from storyboard 'Main' as 'UserReviewVC'.") }
        if _R.storyboard.main().userSettingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userSettingVC' could not be loaded from storyboard 'Main' as 'SettingVC'.") }
        if _R.storyboard.main().vedioChatVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'vedioChatVC' could not be loaded from storyboard 'Main' as 'VideoChatVC'.") }
        if _R.storyboard.main().virtualCrabConnectionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'virtualCrabConnectionVC' could not be loaded from storyboard 'Main' as 'VirtualCrabConnectionVC'.") }
        if _R.storyboard.main().walletVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletVC' could not be loaded from storyboard 'Main' as 'WalletVC'.") }
        if _R.storyboard.main().weeklyScheduleVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'weeklyScheduleVC' could not be loaded from storyboard 'Main' as 'WeeklyScheduleVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
